<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MongoDB的基本操作</title>
      <link href="/2024/01/09/mongodb/"/>
      <url>/2024/01/09/mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB简介"><a href="#MongoDB简介" class="headerlink" title="MongoDB简介"></a>MongoDB简介</h1><p>MongoDB是一个基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供一个可扩展的高性能数据存储解决方案。MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。<br><img src="https://s11.ax1x.com/2024/01/09/pFp6R7n.png" alt="MongoDB-Logo"><br><strong>MongoDB官网地址：</strong> <a href="https://www.mongodb.com/">MongoDB官网</a></p><h1 id="MongoDB概念"><a href="#MongoDB概念" class="headerlink" title="MongoDB概念"></a>MongoDB概念</h1><table><thead><tr><th>SQL术语</th><th>MongoDB术语</th><th>说明</th></tr></thead><tbody><tr><td>database</td><td>database</td><td>数据库</td></tr><tr><td>table</td><td>collection</td><td>数据库表&#x2F;集合</td></tr><tr><td>row</td><td>document</td><td>数据记录行&#x2F;文档</td></tr><tr><td>column</td><td>field</td><td>数据字段&#x2F;域</td></tr><tr><td>index</td><td>index</td><td>索引</td></tr><tr><td>table joins</td><td></td><td>表连接，MongoDB不支持表连接</td></tr><tr><td>primary key</td><td>primary key</td><td>主键&#x2F;MongoDB自动将_id字段设置为主键</td></tr></tbody></table><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>MongoDB中可以建立多个数据库，默认的数据库为<code>db</code> ，该数据库存储在data目录中，每一个数据库都有自己集合和权限，不同的数据库放置在不同的文件中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示MongoDB服务器上的所有数据库</span></span><br><span class="line">show dbs</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">示例输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">admin 0.000GB</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">local</span> 0.000GB</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">test</span> 0.001GB</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前所使用的数据库</span></span><br><span class="line">db</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定使用某个数据库</span></span><br><span class="line">use local</span><br></pre></td></tr></table></figure><blockquote><p>MongoDB默认自带三个数据库：<code>admin</code>、<code>local</code>、<code>config</code></p></blockquote><ul><li><code>admin</code> 数据库：MongoDB中主要的管理数据库，包含了MongoDB实例的所有用户和角色信息。通过该数据库可以进行用户管理、权限分配以及控制MongoDB实例的运行状态等操作。</li><li><code>local</code> 数据库：这是一个存储临时数据的地方，例如复制同步过程中的操作日志。在这个数据库中，可以找到一些关键的集合(collection)，例如<code>startup_log</code>和<code>oplog.rws</code> ，它们记录了MongoDB实例的启动日志和操作日志。</li><li><code>config</code> 数据库：包含了MongoDB的分片信息，用于支持分片集群。在一个分片集群中，每个节点都有一个<code>config</code> 数据库，用于存储集群的各种配置和元数据。<br><strong>数据库的名字应是满足以下条件的任意UTF-8字符串：</strong></li></ul><ol><li>不能是空字符串</li><li>不得含有’ ‘（空格)、.、$、&#x2F;、\和\0 (空字符)</li><li>应全部小写</li><li>最多64字节</li></ol><h2 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h2><p>文档是一组键值(key-value)对(即BSON)。MongoDB的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是MongoDB的特点。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.runoob.com&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;菜鸟教程&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p> <strong>RDBMS 与 MongoDB 对应的术语：</strong></p><table><thead><tr><th>RDBMS</th><th>MongoDB</th></tr></thead><tbody><tr><td>数据库</td><td>数据库</td></tr><tr><td>表格</td><td>集合</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>表联合</td><td>嵌入文档</td></tr><tr><td>主键</td><td>主键（MongoDB提供了key为_id）</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ol><li>文档中的键&#x2F;值对是<strong>有序</strong>的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB<strong>区分类型</strong>和<strong>大小写</strong>。</li><li>MongoDB的文档<strong>不能有重复的键</strong>。</li><li>文档的<strong>键是字符串</strong>。除了少数例外情况，键可以使用任意UTF-8字符。</li></ol><p><strong>文档键的命名规范：</strong></p><ul><li>键不能含有\0 (空字符)。</li><li>.和$有特别的意义，只有在特定环境下才能使用。</li><li>以下划线”_”开头的键是保留的(不是严格要求的)。</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就是MongoDB文档组，类似于RDBMS（关系型数据库管理系统：Retational Database Management System）中的表格。集合存在于数据库中，没有固定的结构；集合可以插入不同格式和类型的数据，但通常情况下插入集合的数据都会有一定的关联性。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.baidu.com&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.google.com&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Google&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="string">&quot;www.runoob.com&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;菜鸟教程&quot;</span><span class="punctuation">,</span><span class="attr">&quot;num&quot;</span><span class="punctuation">:</span><span class="number">5</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>当第一个文档插入时，集合就会被创建。</p></blockquote><h3 id="合法的集合名"><a href="#合法的集合名" class="headerlink" title="合法的集合名"></a>合法的集合名</h3><ul><li>集合名不能是空字符串””。</li><li>集合名不能含有\0字符（空字符)。</li><li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li><li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。</li></ul><h3 id="capped-collections"><a href="#capped-collections" class="headerlink" title="capped collections"></a>capped collections</h3><p><strong>capped collections</strong>是固定大小的collecting有很高的性能以及队列过期的特性（过期按照插入的顺序），有点类似于“RRD”。<strong>capped collections</strong> 是高性能自动的维护对象的插入顺序。非常适合类似于记录日志的功能，和标准的collection不同，必须要显示的创建一个capped collections，指定一个 collection 的大小，单位是字节。collection 的数据存储空间值提前分配的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&quot;mycoll&quot;, &#123;capped:true, size:100000&#125;)</span><br></pre></td></tr></table></figure><ul><li>在 capped collection 中，你能添加新的对象。</li><li>能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li><li>使用 Capped Collection 不能删除一个文档，可以使用 drop() 方法删除 collection 所有的行。</li><li>删除之后，你必须显式的重新创建这个 collection。</li><li>在32bit机器中，capped collection 最大存储为 1e9( 1X109)个字节。</li></ul><h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><p>数据库的信息是存储在集合中。它们使用系统的命名空间：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbname.system.*</span><br></pre></td></tr></table></figure><p>在MongoDB数据库中名字空间 <code>&lt;dbname&gt;.system.*</code>是包含多种系统信息的特殊集合(Collection):</p><table><thead><tr><th>集合命名空间</th><th>描述</th></tr></thead><tbody><tr><td>dbname.system.namespaces</td><td>列出所有名字空间。</td></tr><tr><td>dbname.system.indexes</td><td>列出所有索引。</td></tr><tr><td>dbname.system.profile</td><td>包含数据库概要(profile)信息。</td></tr><tr><td>dbname.system.users</td><td>列出所有可访问数据库的用户。</td></tr><tr><td>dbname.local.sources</td><td>包含复制对端（slave）的服务器信息和状态。</td></tr></tbody></table><p><strong>对于修改系统集合中的对象有如下限制：</strong> </p><ol><li>在插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</li><li>是可修改的。 是可删除的。</li></ol><h2 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h2><p><strong>MongoDB中常用的几种数据类型。</strong></p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td>Integer</td><td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td>Boolean</td><td>布尔值。用于存储布尔值（真&#x2F;假）。</td></tr><tr><td>Double</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>Min&#x2F;Max keys</td><td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td>Array</td><td>用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Timestamp</td><td>时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td>Object</td><td>用于内嵌文档。</td></tr><tr><td>Null</td><td>用于创建空值。</td></tr><tr><td>Symbol</td><td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td>Date</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td>Object ID</td><td>对象 ID。用于创建文档的 ID。</td></tr><tr><td>Binary Data</td><td>二进制数据。用于存储二进制数据。</td></tr><tr><td>Code</td><td>代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td>Regular expression</td><td>正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h3 id="重要的数据类型"><a href="#重要的数据类型" class="headerlink" title="重要的数据类型"></a>重要的数据类型</h3><h4 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h4><p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p><ul><li>前 4 个字节表示创建 <strong>unix</strong> 时间戳,格林尼治时间 <strong>UTC</strong> 时间，比北京时间晚了 8 个小时</li><li>接下来的 3 个字节是机器标识码</li><li>紧接的两个字节由进程 id 组成 PID</li><li>最后三个字节是随机数<br><img src="https://www.runoob.com/wp-content/uploads/2013/10/2875754375-5a19268f0fd9b_articlex.jpeg"><br>MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</li></ul><p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; var newObject = ObjectId()</span><br><span class="line">&gt; newObject.getTimestamp()</span><br><span class="line">ISODate(<span class="string">&quot;2017-11-25T07:21:10Z&quot;</span>)</span><br></pre></td></tr></table></figure><p>ObjectId 转为字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; newObject.str</span><br><span class="line">5a1919e63df83ce79df8b38f</span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><strong>BSON 字符串都是 UTF-8 编码。</strong></p><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><p>BSON 有一个特殊的时间戳类型用于 MongoDB 内部使用，与普通的 日期 类型不相关。 时间戳值是一个 64 位的值。其中：</p><ul><li>前32位是一个 time_t 值（与Unix新纪元相差的秒数）</li><li>后32位是在某秒中操作的一个递增的<code>序数</code><br>在单个 mongod 实例中，时间戳值通常是唯一的。在复制集中， oplog 有一个 ts 字段。这个字段中的值使用BSON时间戳表示了操作时间。<blockquote><p>BSON 时间戳类型主要用于 MongoDB 内部使用。在大多数情况下的应用开发中，你可以使用 BSON 日期类型。</p></blockquote></li></ul><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><p>表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; var mydate1 = new Date()     //格林尼治时间</span><br><span class="line">&gt; mydate1</span><br><span class="line">ISODate(<span class="string">&quot;2018-03-04T14:58:51.233Z&quot;</span>)</span><br><span class="line">&gt; typeof mydate1</span><br><span class="line">object</span><br><span class="line">&gt; var mydate2 = ISODate() //格林尼治时间</span><br><span class="line">&gt; mydate2</span><br><span class="line">ISODate(<span class="string">&quot;2018-03-04T15:00:45.479Z&quot;</span>)</span><br><span class="line">&gt; typeof mydate2</span><br><span class="line">object</span><br></pre></td></tr></table></figure><p>这样创建的时间是日期类型，可以使用 JS 中的 Date 类型的方法。返回一个时间类型的字符串：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; var mydate1str = mydate1.toString()</span><br><span class="line">&gt; mydate1str</span><br><span class="line">Sun Mar 04 2018 14:58:51 GMT+0000 (UTC) </span><br><span class="line">&gt; typeof mydate1str</span><br><span class="line">string</span><br><span class="line">&gt; Date()</span><br><span class="line">Sun Mar 04 2018 15:02:59 GMT+0000 (UTC)   </span><br></pre></td></tr></table></figure><h1 id="MongoDB连接"><a href="#MongoDB连接" class="headerlink" title="MongoDB连接"></a>MongoDB连接</h1><p><strong>连接MongoDB的URL语法</strong><br><code>mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</code></p><ul><li><strong>mongodb:&#x2F;&#x2F;</strong> 这是固定的格式，必须要指定。</li><li><strong>username:password@</strong> 可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登录这个数据库</li><li><strong>host1</strong> 必须的指定至少一个host, host1 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</li><li><strong>portX</strong> 可选的指定端口，如果不填，默认为27017</li><li><strong>&#x2F;database</strong> 如果指定username:password@，连接并验证登录指定数据库。若不指定，默认打开 test 数据库。</li><li><strong>?options</strong> 是连接选项。如果不使用&#x2F;database，则前面需要加上&#x2F;。所有连接选项都是键值对name&#x3D;value，键值对之间通过&amp;或;（分号）隔开<br><strong>连接URL案例：</strong> <code>mongodb://admin:123456@localhost/test</code><br><strong>options选项：</strong></li></ul><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>replicaSet&#x3D;name</td><td>验证replica set的名称。 Impliesconnect&#x3D;replicaSet.</td></tr><tr><td>slaveOk&#x3D;true|false</td><td>- true:在connect&#x3D;direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect&#x3D;replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。<br>- false: 在 connect&#x3D;direct模式下，驱动会自动找寻主服务器. 在connect&#x3D;replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td></tr><tr><td>safe&#x3D;true|false</td><td>- true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).<br><br>false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。</td></tr><tr><td>w&#x3D;n</td><td>驱动添加 { w : n } 到getLastError命令. 应用于safe&#x3D;true。</td></tr><tr><td>wtimeoutMS&#x3D;ms</td><td>驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe&#x3D;true.</td></tr><tr><td>fsync&#x3D;true|false</td><td>- true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe&#x3D;true.<br>- false: 驱动不会添加到getLastError命令中。</td></tr><tr><td>journal&#x3D;true|false</td><td>如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe&#x3D;true</td></tr><tr><td>connectTimeoutMS&#x3D;ms</td><td>可以打开连接的时间。</td></tr><tr><td>socketTimeoutMS&#x3D;ms</td><td>发送和接受sockets的时间。</td></tr></tbody></table><h1 id="MongoDB创建数据库"><a href="#MongoDB创建数据库" class="headerlink" title="MongoDB创建数据库"></a>MongoDB创建数据库</h1><p>MongoDB创建数据库的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure><blockquote><p>创建一个数据库</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">use runoob</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看数据库</span></span><br><span class="line">db</span><br><span class="line">runoob</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入一条数据</span></span><br><span class="line">db.runoob.insertOne(&#123;&quot;name&quot;:&quot;lyj&quot;&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有数据库，发现新建的数据库已存在</span></span><br><span class="line">show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line">lyj     0.000GB</span><br></pre></td></tr></table></figure><blockquote><p>如果现在查看所有数据库，会发现当前新建的数据库并不存在，只有往数据库中插入数据之后，才能查看到</p></blockquote><h1 id="MongoDB删除数据库"><a href="#MongoDB删除数据库" class="headerlink" title="MongoDB删除数据库"></a>MongoDB删除数据库</h1><p>MongoDB删除数据库的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><blockquote><p>删除数据库具体操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选中需要删除的数据库</span></span><br><span class="line">use lyj</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行删除数据库的命令</span></span><br><span class="line">db.dropDatabase()</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有数据库，发现新建的数据库已删除</span></span><br><span class="line">show dbs</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br></pre></td></tr></table></figure><h1 id="MongoDB创建集合"><a href="#MongoDB创建集合" class="headerlink" title="MongoDB创建集合"></a>MongoDB创建集合</h1><p>MongoDB创建集合的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure><p><strong>options具体参数</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>布尔</td><td>（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。  <br><strong>当该值为 true 时，必须指定 size 参数。</strong></td></tr><tr><td>autoIndexId</td><td>布尔</td><td>3.2 之后不再支持该参数。（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td></tr><tr><td>size</td><td>数值</td><td>（可选）为固定集合指定一个最大值，即字节数。  <br><strong>如果 capped 为 true，也需要指定该字段。</strong></td></tr><tr><td>max</td><td>数值</td><td>（可选）指定固定集合中包</td></tr></tbody></table><blockquote><p>创建集合</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建数据库</span></span><br><span class="line">use test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建集合</span></span><br><span class="line">db.createCollection(&quot;lyj&quot;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已有集合show collections/show tables两个命令都是查询已有集合</span></span><br><span class="line">show collections</span><br><span class="line">lyj</span><br></pre></td></tr></table></figure><h1 id="MongoDB删除集合"><a href="#MongoDB删除集合" class="headerlink" title="MongoDB删除集合"></a>MongoDB删除集合</h1><p>MongoDB删除集合的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure><blockquote><p>删除集合</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除名叫lyj的集合</span></span><br><span class="line">db.lyj.drop()</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看是否删除成功</span></span><br><span class="line">show tables</span><br></pre></td></tr></table></figure><h1 id="MongoDB插入文档"><a href="#MongoDB插入文档" class="headerlink" title="MongoDB插入文档"></a>MongoDB插入文档</h1><p>MongoDB插入文档的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br><span class="line">或</span><br><span class="line">db.COLLECTION_NAME.save(document)</span><br></pre></td></tr></table></figure><ul><li>save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用 <strong>db.collection.insertOne()</strong> 或 <strong>db.collection.replaceOne()</strong> 来代替。</li><li>insert(): 若插入的数据主键已经存在，则会抛 <strong>org.springframework.dao.DuplicateKeyException</strong> 异常，提示主键重复，不保存当前数据。<br><strong>3.2 版本之后新增了 db.collection.insertOne() 和 db.collection.insertMany()。</strong><br><code>db.collection.insertOne()</code> 语法格式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.collection.insertOne(</span><br><span class="line">   &lt;document&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">      writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><code>db.collection.insertMany()</code> 语法格式：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.insertMany(</span><br><span class="line">   [ &lt;document 1&gt; , &lt;document 2&gt;, ... ],</span><br><span class="line">   &#123;</span><br><span class="line">      writeConcern: &lt;document&gt;,</span><br><span class="line">      ordered: &lt;boolean&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>参数说明：</li><li>document：要写入的文档。</li><li>writeConcern：写入策略，默认为 1，即要求确认写操作，0 是不要求。</li><li>ordered：指定是否按顺序写入，默认 true，按顺序写入<blockquote><p><code>insertOne()</code> 表示插入一条数据，<code>insertMany()</code> 表示插入多条数据</p></blockquote></li></ul><p>插入文档</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令会往<span class="built_in">test</span>数据的lyj集合中插入文档</span></span><br><span class="line">db.lyj.insert(&#123;title: &#x27;MongoDB 教程&#x27;, </span><br><span class="line">    description: &#x27;MongoDB 是一个 Nosql 数据库&#x27;,</span><br><span class="line">    by: &#x27;菜鸟教程&#x27;,</span><br><span class="line">    url: &#x27;http://www.runoob.com&#x27;,</span><br><span class="line">    tags: [&#x27;mongodb&#x27;, &#x27;database&#x27;, &#x27;NoSQL&#x27;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已插入的文档</span></span><br><span class="line">db.lyj.find()</span><br></pre></td></tr></table></figure><h1 id="MongoDB更新文档"><a href="#MongoDB更新文档" class="headerlink" title="MongoDB更新文档"></a>MongoDB更新文档</h1><p>MongoDB更新文档的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。</li><li><strong>update</strong> : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li><li><strong>upsert</strong> : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li><li><strong>multi</strong> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li><strong>writeConcern</strong> :可选，抛出异常的级别。<blockquote><p>更新文档</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.lyj.update(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;,&#123;$set:&#123;&#x27;title&#x27;:&#x27;MongoDB&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="MongoDB删除文档"><a href="#MongoDB删除文档" class="headerlink" title="MongoDB删除文档"></a>MongoDB删除文档</h1><p>MongoDB删除数据库的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>query</strong> :（可选）删除的文档的条件。</li><li><strong>justOne</strong> : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li><strong>writeConcern</strong> :（可选）抛出异常的级别。<blockquote><p>删除文档</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.lyj.remove(&#123;&#x27;title&#x27;:&#x27;MongoDB 教程&#x27;&#125;)</span><br></pre></td></tr></table></figure><h1 id="MongoDB查询文档"><a href="#MongoDB查询文档" class="headerlink" title="MongoDB查询文档"></a>MongoDB查询文档</h1><p>MongoDB查询文档的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure><ul><li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li><li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。<blockquote><p>pretty() 方法以格式化的方式来显示所有文档<code>db.lyj.find().pretty()</code></p></blockquote></li></ul><h2 id="MongoDB-与-RDBMS-Where-语句比较"><a href="#MongoDB-与-RDBMS-Where-语句比较" class="headerlink" title="MongoDB 与 RDBMS Where 语句比较"></a>MongoDB 与 RDBMS Where 语句比较</h2><table><thead><tr><th>操作</th><th>格式</th><th>范例</th><th>RDBMS中的类似语句</th></tr></thead><tbody><tr><td>等于</td><td><code>&#123;&lt;key&gt;:&lt;value&gt;</code>}</td><td><code>db.col.find(&#123;&quot;by&quot;:&quot;菜鸟教程&quot;&#125;).pretty()</code></td><td><code>where by = &#39;菜鸟教程&#39;</code></td></tr><tr><td>小于</td><td><code>&#123;&lt;key&gt;:&#123;$lt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.col.find(&#123;&quot;likes&quot;:&#123;$lt:50&#125;&#125;).pretty()</code></td><td><code>where likes &lt; 50</code></td></tr><tr><td>小于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$lte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.col.find(&#123;&quot;likes&quot;:&#123;$lte:50&#125;&#125;).pretty()</code></td><td><code>where likes &lt;= 50</code></td></tr><tr><td>大于</td><td><code>&#123;&lt;key&gt;:&#123;$gt:&lt;value&gt;&#125;&#125;</code></td><td><code>db.col.find(&#123;&quot;likes&quot;:&#123;$gt:50&#125;&#125;).pretty()</code></td><td><code>where likes &gt; 50</code></td></tr><tr><td>大于或等于</td><td><code>&#123;&lt;key&gt;:&#123;$gte:&lt;value&gt;&#125;&#125;</code></td><td><code>db.col.find(&#123;&quot;likes&quot;:&#123;$gte:50&#125;&#125;).pretty()</code></td><td><code>where likes &gt;= 50</code></td></tr><tr><td>不等于</td><td><code>&#123;&lt;key&gt;:&#123;$ne:&lt;value&gt;&#125;&#125;</code></td><td><code>db.col.find(&#123;&quot;likes&quot;:&#123;$ne:50&#125;&#125;).pretty()</code></td><td><code>where likes != 50</code></td></tr></tbody></table><h2 id="MongoDB的逻辑运算符"><a href="#MongoDB的逻辑运算符" class="headerlink" title="MongoDB的逻辑运算符"></a>MongoDB的逻辑运算符</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and运算符</span></span><br><span class="line">db.lyj.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例</span></span><br><span class="line">db.lyj.find(&#123;&quot;by&quot;:&quot;菜鸟教程&quot;, &quot;title&quot;:&quot;MongoDB 教程&quot;&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or运算符</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">db.col.find(</span></span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例</span></span><br><span class="line">db.lyj.find(&#123;$or:[&#123;&quot;by&quot;:&quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and和or一起使用</span></span><br><span class="line">db.lyj.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;菜鸟教程&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://www.runoob.com&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MongoDB-type操作符"><a href="#MongoDB-type操作符" class="headerlink" title="MongoDB $type操作符"></a>MongoDB $type操作符</h1><p><code>$type</code>操作符是基于BSON类型来检索集合中匹配的数据类型，并返回结果。<br><strong>MongoDB 中可以使用的类型如下表所示：</strong></p><table><thead><tr><th><strong>类型</strong></th><th><strong>数字</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>Double</td><td>1</td><td></td></tr><tr><td>String</td><td>2</td><td></td></tr><tr><td>Object</td><td>3</td><td></td></tr><tr><td>Array</td><td>4</td><td></td></tr><tr><td>Binary data</td><td>5</td><td></td></tr><tr><td>Undefined</td><td>6</td><td>已废弃。</td></tr><tr><td>Object id</td><td>7</td><td></td></tr><tr><td>Boolean</td><td>8</td><td></td></tr><tr><td>Date</td><td>9</td><td></td></tr><tr><td>Null</td><td>10</td><td></td></tr><tr><td>Regular Expression</td><td>11</td><td></td></tr><tr><td>JavaScript</td><td>13</td><td></td></tr><tr><td>Symbol</td><td>14</td><td></td></tr><tr><td>JavaScript (with scope)</td><td>15</td><td></td></tr><tr><td>32-bit integer</td><td>16</td><td></td></tr><tr><td>Timestamp</td><td>17</td><td></td></tr><tr><td>64-bit integer</td><td>18</td><td></td></tr><tr><td>Min key</td><td>255</td><td>Query with -1.</td></tr><tr><td>Max key</td><td>127</td><td></td></tr><tr><td><strong>案列</strong></td><td></td><td></td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">想获取 <span class="string">&quot;col&quot;</span> 集合中 title 为 String 的数据，这两个的含义都是一样的</span></span><br><span class="line">db.col.find(&#123;&quot;title&quot; : &#123;$type : 2&#125;&#125;)</span><br><span class="line">db.col.find(&#123;&quot;title&quot; : &#123;$type : &#x27;string&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure><h1 id="MongoDB-Limit和Skip方法"><a href="#MongoDB-Limit和Skip方法" class="headerlink" title="MongoDB Limit和Skip方法"></a>MongoDB Limit和Skip方法</h1><p>MongoDB的Limit()方法的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().limit(NUMBER)</span><br></pre></td></tr></table></figure><blockquote><p>Limit()方法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.lyj.find(&#123;&#125;,&#123;&quot;title&quot;:lyj,_id:0&#125;).limit(2)</span><br></pre></td></tr></table></figure><p>MongoDB的Skip()方法的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</span><br></pre></td></tr></table></figure><blockquote><p>Skip()方法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.lyj.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).limit(1).skip(1)</span><br></pre></td></tr></table></figure><h1 id="MongoDB-sort方法"><a href="#MongoDB-sort方法" class="headerlink" title="MongoDB sort方法"></a>MongoDB sort方法</h1><p>在 MongoDB 中使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。<br>sort()方法的语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>sort()方法</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.lyj.find(&#123;&#125;,&#123;&quot;title&quot;:1,_id:0&#125;).sort(&#123;&quot;likes&quot;:-1&#125;)</span><br></pre></td></tr></table></figure><h1 id="MongoDB-索引"><a href="#MongoDB-索引" class="headerlink" title="MongoDB 索引"></a>MongoDB 索引</h1><p>索引通常能够极大的提高查询的效率，如果没有索引，MongoDB在读取数据时必须扫描集合中的每个文件并选取那些符合查询条件的记录。<br>这种扫描全集合的查询效率是非常低的，特别在处理大量的数据时，查询可能要花费几十秒甚至几分钟，这对网站的性能是非常致命的。<br>索引是特殊的数据结构，索引存储在一个易于遍历读取的数据集合中，索引是对数据库表中一列或多列的值进行排序的一种结构</p><blockquote><p>MongoDB使用 createIndex() 方法来创建索引。</p></blockquote><p>createIndex()方法基本语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">实例</span></span><br><span class="line">db.lyj.createIndex(&#123;&quot;title&quot;:1&#125;)</span><br></pre></td></tr></table></figure><p>createIndex() 接收可选参数，可选参数列表：</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>background</td><td>Boolean</td><td>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为<strong>false</strong>。</td></tr><tr><td>unique</td><td>Boolean</td><td>建立的索引是否唯一。指定为true创建唯一索引。默认值为<strong>false</strong>.</td></tr><tr><td>name</td><td>string</td><td>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td>dropDups</td><td>Boolean</td><td>3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 <strong>false</strong>.</td></tr><tr><td>sparse</td><td>Boolean</td><td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <strong>false</strong>.</td></tr><tr><td>expireAfterSeconds</td><td>integer</td><td>指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td>v</td><td>index version</td><td>索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td>weights</td><td>document</td><td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td>default_language</td><td>string</td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td>language_override</td><td>string</td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td></tr></tbody></table><h1 id="MongoDB-aggregate-方法"><a href="#MongoDB-aggregate-方法" class="headerlink" title="MongoDB aggregate() 方法"></a>MongoDB aggregate() 方法</h1><p><code>aggregate()</code> 方法在MongoDB中的作用是聚合<br>aggregate() 方法的基本语法格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure><p>聚合的表达式:</p><table><thead><tr><th>表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>$sum</td><td>计算总和。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td></tr><tr><td>$avg</td><td>计算平均值</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td></tr><tr><td>$min</td><td>获取集合中所有文档对应值得最小值。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td></tr><tr><td>$max</td><td>获取集合中所有文档对应值得最大值。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td></tr><tr><td>$push</td><td>将值加入一个数组中，不会判断是否有重复的值。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td></tr><tr><td>$addToSet</td><td>将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td></tr><tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td></tr><tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td></tr></tbody></table><h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。<br>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。<br>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。<br>聚合框架中常用的操作：</p><ul><li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li>$group：将集合中的文档分组，可用于统计结果。</li><li>$sort：将输入文档排序后输出。</li><li>$geoNear：输出接近某一地理位置的有序文档。</li></ul><h3 id="管道操作符实例"><a href="#管道操作符实例" class="headerlink" title="管道操作符实例"></a>管道操作符实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$project</span>实例</span></span><br><span class="line">db.article.aggregate(</span><br><span class="line">    &#123; $project : &#123;</span><br><span class="line">        title : 1 ,</span><br><span class="line">        author : 1 ,</span><br><span class="line">    &#125;&#125;</span><br><span class="line"> );</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$match</span>实例</span></span><br><span class="line">db.articles.aggregate( [</span><br><span class="line">                        &#123; $match : &#123; score : &#123; $gt : 70, $lte : 90 &#125; &#125; &#125;,</span><br><span class="line">                        &#123; $group: &#123; _id: null, count: &#123; $sum: 1 &#125; &#125; &#125;</span><br><span class="line">                       ] );</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$skip</span>实例</span></span><br><span class="line">db.article.aggregate(</span><br><span class="line">    &#123; $skip : 5 &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BackEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD领域驱动设计</title>
      <link href="/2023/10/08/ddd-ling-yu-qu-dong-she-ji/"/>
      <url>/2023/10/08/ddd-ling-yu-qu-dong-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Domain-Driver-Design"><a href="#Domain-Driver-Design" class="headerlink" title="Domain Driver Design"></a>Domain Driver Design</h1><h2 id="MVC架构"><a href="#MVC架构" class="headerlink" title="MVC架构"></a>MVC架构</h2><p>在mvc架构中，主要划分为三个组件：Model（模型）、View（视图）、Controller（控制器）<br><strong>传统三层架构模型(MVC)</strong> <a href="https://imgse.com/i/pPvQ5vD"><img src="https://z1.ax1x.com/2023/10/08/pPvQ5vD.png" alt="pPvQ5vD.png"></a></p><h2 id="DDD架构"><a href="#DDD架构" class="headerlink" title="DDD架构"></a>DDD架构</h2><p>DDD架构主要将应用分成四个层次：</p><ol><li>表现层（Presentation Layer）：负责与用户进行交互，展示数据和接收用户输入。表现层通常包括用户界面、控制器、视图和用户输入验证等组件。</li><li>应用层（Application Layer）：负责协调处理用户请求，并将其转化为对领域层的操作。应用层中的服务和命令处理程序执行应用程序逻辑，调用领域层中的领域对象来完成具体的业务处理。应用层还负责事务管理和协调不同领域对象之间的交互。</li><li>领域层（Domain Layer）：是整个架构的核心，包含了业务领域的核心概念、业务规则和业务逻辑。领域层由聚合、实体、值对象等领域对象组成，它们封装了业务行为和状态，并通过领域服务之间的交互来完成复杂的业务操作。</li><li>基础设施层（Infrastructure Layer）：提供支持上述三个层次的基础设施和技术实现，如数据库访问、消息队列、外部服务和框架等。基础设施层隐藏了底层技术的细节，提供统一的接口供上层调用。</li></ol><p><strong>DDD架构模型</strong><br><a href="https://imgse.com/i/pPvQoKe"><img src="https://z1.ax1x.com/2023/10/08/pPvQoKe.png" alt="pPvQoKe.png"></a></p><h1 id="COLA"><a href="#COLA" class="headerlink" title="COLA"></a>COLA</h1><h3 id="COLA架构"><a href="#COLA架构" class="headerlink" title="COLA架构"></a>COLA架构</h3><p><a href="https://imgse.com/i/pPvQv28"><img src="https://z1.ax1x.com/2023/10/08/pPvQv28.png" alt="pPvQv28.png"></a> <a href="https://imgse.com/i/pPvlSKg"><img src="https://z1.ax1x.com/2023/10/08/pPvlSKg.png" alt="pPvlSKg.png"></a><br><strong>Adapter层</strong>：负责对前端展示的路由和适配，对应传统的B&#x2F;S架构来说，adapter相当于之前的controller <strong>App层</strong>：主要负责获取输入，组装上下文，参数校验，调用领域层做业务处理，如果需要的话，发送消息通知等。层次是开放的，应用层也可以绕过领域层，直接访问基础实施层<br><strong>Domain层</strong>：主要是封装了核心业务逻辑，并通过领域服务（Domain Service）和领域对象（Domain Entity）的方法对App层提供业务实体和业务逻辑计算。领域是应用的核心，不依赖任何其他层次； <strong>Infrastructure层</strong>：主要负责技术细节问题的处理，比如数据库的CRUD、搜索引擎、文件系统、分布式服务的RPC等。此外，领域防腐的重任也落在这里，外部依赖需要通过gateway的转义处理，才能被上面的App层和Domain层使用。 <strong>Client层</strong>：对外提供的功能API，如果外部模块需要使用本项目功能只需引用 client 中的 API 接口即可实现功能、</p><table><thead><tr><th>adapter</th><th>web</th><th>处理页面请求的Controller</th></tr></thead><tbody><tr><td>app</td><td>业务功能包（user、order）放xxxServiceImpl</td><td>业务名</td></tr><tr><td>app</td><td>executor</td><td>修改相关的执行逻辑</td></tr><tr><td>app</td><td>query(executor包下)</td><td>查询相关的执行逻辑</td></tr><tr><td>client</td><td>api(放xxxService)</td><td>存放对外功能的api</td></tr><tr><td>client</td><td>dto（data、query）</td><td>对外返回的对象及调用方传入的参数对象</td></tr><tr><td>domain</td><td>gateway</td><td>防腐层，让 Infrastructure 层实现逻辑</td></tr><tr><td>domain</td><td>业务功能包（entity、值对象）</td><td>根据业务功能分包，包中存放业务实体及值对象</td></tr><tr><td>infrastructure</td><td>convertor</td><td>存放将 DO 转化为 entity的类</td></tr><tr><td>infrastructure</td><td>config</td><td>存放配置相关</td></tr><tr><td>infrastructure</td><td>gateway.impl</td><td>实现 domain 层的 gateway 接口的实现类</td></tr><tr><td>infrastructure</td><td>dataobject</td><td>存放数据库对象的DO</td></tr><tr><td>infrastructure</td><td>mapper</td><td>mapper文件</td></tr></tbody></table><p><a href="https://imgse.com/i/pPvlQaR"><img src="https://z1.ax1x.com/2023/10/08/pPvlQaR.png" alt="pPvlQaR.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> BackEnd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Domain Driver Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配原理</title>
      <link href="/2023/09/26/springboot-zi-dong-pei-zhi-yuan-li/"/>
      <url>/2023/09/26/springboot-zi-dong-pei-zhi-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1><p><code>SpringBoot</code>的自动装配是通过SPI的方式实现的，并进行了进一步的优化，从而实现了自动装配。<code>SPI</code>全称为Serveice Provider Interface，是Java提供的一种服务发现机制。它<strong>允许不同的组件在运行时动态的扩展、替换和加载实现</strong>。<code>SPI</code>是一种基于接口和实现分离的设计模式。<br>在<code>SPI</code>机制中，定义一个接口作为服务的标准化接口，然后通过类路径下提供特定配置文件来指定具体的实现。这个配置文件通常位于<code>META-INF/services</code>目录下，以接口的全限定名命名。配置文件中列出了实现该接口的具体类的全限定名。<br>当需要使用某项服务时，应用程序可以通过<code>SPI</code>机制查找平加载对应的实现类。Java运行时会通过读取配置文件获取到实现类的信息，并实例化对应的类。这样能够做到在不修改代码的情况下，通过添加&#x2F;替换配置文件中的实现类，来改变程序的行为或者增加新功能。</p><h2 id="SPI的应用"><a href="#SPI的应用" class="headerlink" title="SPI的应用"></a>SPI的应用</h2><ol><li><strong>JDBC数据库驱动</strong></li><li><strong>日志框架（SLF4）</strong></li></ol><h1 id="SpringBoot自动装配原理"><a href="#SpringBoot自动装配原理" class="headerlink" title="SpringBoot自动装配原理"></a>SpringBoot自动装配原理</h1><p>SpringBoot自动配置是默认开启的，<code>spring.boot.enableautoconfiguration=true</code>，可以通过<code>application.properties</code>或<code>application.yml</code>来关闭自动配置。<br><code>SpringBoot</code>应用都会创建一个启动类，启动类上包含了<code>@SpringBootApplication</code>注解，这个注解是一个复合的注解，分别对这三个注解进行了封装<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>@SpringBootApplication</code>注解的实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Inherited</span>  </span><br><span class="line"><span class="meta">@SpringBootConfiguration</span>  </span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>  </span><br><span class="line"><span class="meta">@ComponentScan(  </span></span><br><span class="line"><span class="meta">    excludeFilters = &#123;@Filter(  </span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,  </span></span><br><span class="line"><span class="meta">    classes = &#123;TypeExcludeFilter.class&#125;  </span></span><br><span class="line"><span class="meta">), @Filter(  </span></span><br><span class="line"><span class="meta">    type = FilterType.CUSTOM,  </span></span><br><span class="line"><span class="meta">    classes = &#123;AutoConfigurationExcludeFilter.class&#125;  </span></span><br><span class="line"><span class="meta">)&#125;  </span></span><br><span class="line"><span class="meta">)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication</span><br></pre></td></tr></table></figure><p><code>@SpringBootConfiguration</code>：用于标识一个类是SpringBoot的配置类。<br><code>@EnableAutoConfiguration</code>：启动SpringBoot的自动配置机制。<br><code>@ComponentScan</code>：扫描被<code>@Component</code>注解的Bean，注解默认会扫描启动类所在的包下的所有类。</p><p><code>@EnableAutoConfiguration</code>是实现SpringBoot自动配置的核心，该注解上通过<code>@Import注解</code>导入了一个<code>AutoConfigurationImportSelector</code>类，<code>AutoConfigurationImportSelector</code> 类实现了 <code>ImportSelector</code>接口，也就实现了这个接口中的 <code>selectImports</code>方法，这个方法主要是用来<strong>获取所有符合条件的类的全限定类名。</strong><br><code>@EnableAutoConfiguration</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="meta">@Documented</span>  </span><br><span class="line"><span class="meta">@Inherited</span>  </span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span>  </span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">  </span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AutoConfigurationImportSelector</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> NO_IMPORTS;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoConfigurationEntry(annotationMetadata);  </span><br><span class="line">            <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>通过<code>selectImports()</code>方法调用<code>getAutoConfigurationEntry(annotationMetadata)</code>，<code>getAutoConfigurationEntry(annotationMetadata)</code>方法通过<code>SpringFactoriesLoader.loadFactoryNames()</code>，扫描所有含有<code>META-INF/spring.factories</code>的<code>jar</code>包，然后读取<code>META-INF/spring.factories</code>文件中所配置的类的全限定类名。在这些配置类中所定义的Bean会<strong>根据条件注解来决定</strong>是否需要将其导入到Spring的容器中。<br>一般条件判断都会有<code>@ConditionalOnClass</code>这样的注解，判断是否有对应的class文件，如果有则加载该类，并将这个配置类所有的Bean放入Spring容器中。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sychronized底层实现</title>
      <link href="/2023/09/20/sychronized-di-ceng-shi-xian/"/>
      <url>/2023/09/20/sychronized-di-ceng-shi-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="sychronized"><a href="#sychronized" class="headerlink" title="sychronized"></a>sychronized</h1><p><code>sychronized</code>是Java的关键字，用于实现线程之间的同步，保证多个线程对共享资源的安全访问，也被成为同步锁。<br><code>sychronized</code>的作用是保证在同一时刻，被修饰的代码块或者方法只会有一个线程执行，以达到保证并发安全的效果。</p><h1 id="sychronized的使用方式"><a href="#sychronized的使用方式" class="headerlink" title="sychronized的使用方式"></a>sychronized的使用方式</h1><p><code>sychronized</code>主要有三种使用方式：</p><ol><li><strong>修饰实例方法：对于当前实例加锁</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> sychronized <span class="keyword">void</span> <span class="title function_">methodName</span><span class="params">()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>修饰静态方法：对于当前类对象加锁</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> sychronized <span class="keyword">void</span> <span class="title function_">methodName</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><strong>修饰代码块：对给定的对象加锁</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sychronized(<span class="built_in">this</span>)&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="sychronized的底层实现"><a href="#sychronized的底层实现" class="headerlink" title="sychronized的底层实现"></a>sychronized的底层实现</h1><p>sychronized的底层实现依赖于JVM，因此sychronized的与JVM内存的存储：Java对象头、以及monitor对象监视器有关。</p><h2 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h2><p>在JVM中，对象在内存中的存储布局，分为三个部分：</p><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul><p>在Java中，每个对象都有一个对象头（Object Header），它包含了一些用于管理对象的元数据信息。<br>对象头的具体结构和内容取决于JVM的实现和配置，并且可能会因为不同版本的JVM和不同的操作系统而有所区别。一些常见的对象头结构和字段如下：</p><ol><li>Mark Word（标记字段）：占用对象头的一部分，用于存储对象的标记状态和锁信息。sychronized使用的锁对象是存储在Java的对象头的标记字段里。标记字段通常包含了以下信息<ul><li>对象的哈希码（用于支持<code>hashCode()</code>方法）</li><li>锁状态（是否被锁定、偏向锁或轻量级锁的标识等）</li><li>并发标记（用于支持垃圾回收、对象分代等）</li><li>偏向锁的线程ID</li><li>偏向时间戳</li></ul></li><li>类型指针：指向对象的类元数据的指针，用于确定对象属于哪个类。</li><li>数组长度：如果对象是数组类型，则会包含数字的长度信息。</li></ol><p><a href="https://imgse.com/i/pP5h0gI"><img src="https://z1.ax1x.com/2023/09/20/pP5h0gI.png" alt="对象头"></a></p><blockquote><p>除常见字段外，对象头可能还包含其他与垃圾回收、锁机制和JIT编译等相关的信息。并且对象头的大小是固定的，在不同JVM上可能有所不同。例如：在32位JVM上对象头通常占8个字节，而在64位JVM上通常占12或16个字节。</p></blockquote><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><p>通过<code>javap -c -s -v -l SynchronizedDemo.class</code>命令反编译代码，可以看到相对应的字节码指令。<br><code>sychronized</code>在修饰代码块的时候，JVM采用<code>monitorenter</code>和<code>monitorexit</code>两个指令来实现同步，<code>monitorenter</code>指令指向同步代码块开始的位置，<code>monitorexit</code>指令指向同步代码块结束的位置。<br><a href="https://imgse.com/i/pP5hvx1"><img src="https://z1.ax1x.com/2023/09/20/pP5hvx1.png" alt="Monitorenter"></a><br><code>sychronized</code>在修饰实例方法的时候，JVM采用<code>ACC_SYNCHRONIZED</code>标识符来实现同步，通过这个标识来指明这是一个同步方法<br><a href="https://imgse.com/i/pP5hj2R"><img src="https://z1.ax1x.com/2023/09/20/pP5hj2R.png" alt="acc_synchronized"></a></p><blockquote><p>上述的三个命令都是基于<code>Monitor</code>实现的。</p></blockquote><p>实例对象结构中有对象头，对象头中有一个结构Mark Word，Mark Word的指针指向了<code>Monitor</code>。<br><code>Monitor</code>是一种同步机制，在JVM中，<code>Monitor</code>的实现是由ObjectMonitor实现的，称之为<code>Monitor</code>锁。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ObjectMonitor</span>() &#123;</span><br><span class="line">    _header       = <span class="literal">NULL</span>;</span><br><span class="line">    _count        = <span class="number">0</span>; <span class="comment">// 由于synchronized是可重入锁，count用于记录当前对象锁拥有者线程获取锁的次数</span></span><br><span class="line">    _waiters      = <span class="number">0</span>,</span><br><span class="line">    _recursions   = <span class="number">0</span>;</span><br><span class="line">    _object       = <span class="literal">NULL</span>;</span><br><span class="line">    _owner        = <span class="literal">NULL</span>;</span><br><span class="line">    _WaitSet      = <span class="literal">NULL</span>; <span class="comment">// 调用了wait方法，处于WAIT/TIME_WAIT的线程，会被加入到WaitSet</span></span><br><span class="line">    _WaitSetLock  = <span class="number">0</span> ;</span><br><span class="line">    _Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">    _succ         = <span class="literal">NULL</span> ;</span><br><span class="line">    _cxq          = <span class="literal">NULL</span> ;</span><br><span class="line">    FreeNext      = <span class="literal">NULL</span> ;</span><br><span class="line">    _EntryList    = <span class="literal">NULL</span> ; <span class="comment">// 处于等待锁block状态的线程，会被加入到EntryList</span></span><br><span class="line">    _SpinFreq     = <span class="number">0</span> ;</span><br><span class="line">    _SpinClock    = <span class="number">0</span> ;</span><br><span class="line">    OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对象监视器主要基于<code>ObjectMonitor</code>结构体中的EntryList、WaitSet两个队列以及计数器count实现的。</p><ol><li>当有多个线程同时想要获取某个对象锁时，首先会进入EntryList队列。</li><li>当某个线程获取到对象锁时，线程成为对象锁的拥有者，准备开始运行加锁代码时，执行字节码指令<code>monitorenter</code>，此时<code>count++</code>。</li><li>当对象拥有者再次获取锁时，由于<code>sychronized</code>锁是可重入的，此时<code>count++</code>，而不是在EntryList队列中阻塞等待锁。</li><li>每个加锁代码块<strong>运行完成或因异常退出时</strong>，都会执行<code>monitorexit</code>指令，此时<code>count--</code>，当count等于0时，拥有对象锁的线程释放锁。</li><li>拥有锁的线程在运行的过程中调用了<code>wait()</code>方法，线程将会进入到WaitSet队列中，等待被<code>notify()</code>唤醒或等待的时间到了，才可能再次成为锁的拥有者。</li></ol><h1 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h1><p>锁解决了数据的安全性问题，但是同时带来了性能的下降，因此在JDK1.6之后对于<code>sychronized</code>锁做了一些优化，为了减少获得锁和释放锁带来ed开销，引入了偏向锁、轻量级锁、重量级锁。<br><a href="https://imgse.com/i/pP5Iw8J"><img src="https://z1.ax1x.com/2023/09/20/pP5Iw8J.png" alt="锁升级"></a><br><strong>无锁</strong><br>没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但是同时只有一个线程能够成功。<br><strong>偏向锁</strong><br>大多数情况下，锁不仅不存在多线程竞争，而且总是同一线多次获得，为了让线程获取锁的代价更低引入了偏向锁。偏向锁会偏向第一个获得它的线程，如果在接下来的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程永远不需要同步。<br><strong>轻量级锁</strong><br>当偏向锁被另外的线程获取时，偏向锁会升级为轻量锁，其他线程会通过自旋的方式尝试获取锁，不会阻塞，从而提高性能。<br><strong>重量级锁</strong><br>其他线程试图获取锁时，都会被阻塞，只有持有锁的线程释放锁之后才会唤醒这些线程。</p><p><a href="https://imgse.com/i/pP5Ivxs"><img src="https://z1.ax1x.com/2023/09/20/pP5Ivxs.png" alt="Mark Word"></a></p><ol><li>当无锁的时候，Mark Word记录对象的hashCode，锁标志位是01，是否偏向锁是0</li><li>当对象被当做同步锁并有一个线程抢到锁时，锁标志位还是01，但是是否偏向锁变成了01，并且记录了当前线程的ID</li><li>当有其他线程来获取锁时，发现处于偏向锁状态，会使用CAS操作来尝试获取锁，并且这个操作时有可能成功的，获取获取成功，Mark Word中保存的线程ID将会替换成当前线程的；如果抢锁失败，偏向锁会升级成为轻量级锁，JVM会在当前线程的线程栈开辟一块单独的空间，保存指向对象锁Mark Word的指针，同时在对象锁Mark Word中保存指向这片空间的指针，如果保存成功，代表线程抢到了锁，就把Mark Word的锁标志位改为00</li><li>轻量级锁抢锁失败，JVM会使用自旋锁，自旋锁不是一个锁，只是代表不断地重试，尝试抢锁。自旋锁在JDK1.7是默认开始的，且自旋次数由JVM决定，自旋锁重试之后任然失败，将会升级成为重量级锁，锁标志位改为10。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sychronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现HashMap(JDK1.7)</title>
      <link href="/2023/09/18/shi-xian-hashmap/"/>
      <url>/2023/09/18/shi-xian-hashmap/</url>
      
        <content type="html"><![CDATA[<h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>HashMap是数据结构中的哈希表在Java中的具体实现。<br>哈希表(Hash Table)是一种常见的数据结构，也被称为散列表。它通过将键映射到存储桶(Buckets)中的位置来高效的存储和检索数据。哈希表使用一个哈希函数来计算键的散列值，然后将散列值映射到存储桶的索引上。<br>哈希表由<code>存储桶数组</code>和<code>哈希函数</code>组成。</p><h1 id="存储桶数组"><a href="#存储桶数组" class="headerlink" title="存储桶数组"></a>存储桶数组</h1><p>存储桶数组(Bucket Array)是哈希表中用于存储数据的主要结构，它是由一个固定数量的存储桶(Bucket)组成的数组。每个存储桶可以存储一个或多个元素，每个元素都由一个键值对(key-value pair)组成，其中键用于计算哈希值，而值代表实际存储的数据。</p><h1 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h1><p>哈希函数(Hash Function)是一种算法，它可以将任意长度的输入数据映射成固定长度输出，这个输出通常称为哈希值。</p><h2 id="哈希函数构造"><a href="#哈希函数构造" class="headerlink" title="哈希函数构造"></a>哈希函数构造</h2><p>哈希函数的构造是哈希表实现的关键之一。常见的哈希函数构造方法：</p><ol><li>直接定值法：直接通过键值映射到对应的数组位置。</li><li>数字分析法：取键的某些数字作为映射的位置。</li><li>平方取中法：取键平放的中间几位作为映射的位置。</li><li>折叠法：将键分割成数位相同的几段，然后把它们的叠加和作为映射的位置。</li><li>随机数法：使用一个随机数发生器生成一个随机数作为哈希值。</li><li>除留余数法：键除以一个足够大的质数，所得的余数作为哈希地址。</li></ol><h1 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h1><p>哈希冲突(Hash Collision)是指两个或多个不同的元素被哈希函数映射到相同的哈希值。哈希表设计的目标是将元素均匀的分布在不同的槽位上，以避免冲突和提高效率。然而，由于哈希函数的限制和输入数据的多样性，冲突是难以避免的。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>哈希冲突(Hash Collision)解决方法：</p><ol><li>开发地址发：当发生冲突的时候，通过线性探测、二次探测、双重哈希等方法，在哈希表中寻找到下一个可用的位置。</li><li>链地址法：当发生冲突的时候，在哈希表的每一个槽位上维护一个链表，将冲突的元素存储在同一个槽位上。</li><li>再哈希法：构造多个哈希函数，在发生冲突时，更换哈希函数，直到找到空闲位置。</li></ol><h1 id="实现HashMap"><a href="#实现HashMap" class="headerlink" title="实现HashMap"></a>实现HashMap</h1><p>整体设计方案：</p><ul><li>哈希函数：采用<code>hashCode()</code>加上除留余数法</li><li>哈希冲突解决方法：链地址法</li></ul><h2 id="定义成员变量"><a href="#定义成员变量" class="headerlink" title="定义成员变量"></a>定义成员变量</h2><p>定义<code>MyHashMap</code>的成员变量：</p><ol><li>定义默认容量</li><li>定义默认负载因子</li><li>定义MyHashMap的大小</li><li>定义桶数组<br> 自定义内部节点类来实现桶数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义内部节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt;&#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 键  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> K key;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 值  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> V value;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 后继  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; next;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.key = key;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value, Node&lt;K, V&gt; next)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.key = key;  </span><br><span class="line">        <span class="built_in">this</span>.value = value;  </span><br><span class="line">        <span class="built_in">this</span>.next = next;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 默认容量  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 默认负载因子  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * MyHashMap的大小  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 桶数组  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> Node&lt;K, V&gt;[] buckets;</span><br></pre></td></tr></table></figure></li></ol><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>定义两个构造函数，一个为无参构造函数，并为桶设置默认容量；另一个为有参构造函数，通过参数指定桶的容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 无参构造方法，设置桶数组大小为默认容量  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyHashMap</span><span class="params">()</span>&#123;  </span><br><span class="line">    <span class="built_in">this</span>.buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[DEFAULT_CAPACITY];  </span><br><span class="line">    <span class="built_in">this</span>.size = <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 有参构造器，设置桶的容量  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> capacity int  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MyHashMap</span><span class="params">(<span class="type">int</span> capacity)</span>&#123;  </span><br><span class="line">    buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[capacity];  </span><br><span class="line">    <span class="built_in">this</span>.size = <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希函数-1"><a href="#哈希函数-1" class="headerlink" title="哈希函数"></a>哈希函数</h2><p>通过<code>hashCode()</code>和除留余数法实现哈希函数，来获取哈希地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 哈希函数，获取哈希地址  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(K key, <span class="type">int</span> length)</span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> Math.abs(key.hashCode() &amp; (length - <span class="number">1</span>));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h2><p><strong>添加元素逻辑：</strong></p><ul><li>判断是否需要扩容</li><li>获取元素插入位置</li><li>如果要插入的位置为空，则插入元素</li><li>如果不为空，则遍历链表</li><li>如果元素的key和节点的相同，则覆盖，否则新建节点插入链表头部(JDK7的HashMap使用头插法)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 添加方法  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value V  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (size &gt;= buckets.length * DEFAULT_LOAD_FACTOR) &#123;  </span><br><span class="line">        resize();  </span><br><span class="line">    &#125;  </span><br><span class="line">    putVal(key, value, buckets);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 将元素存入Node数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value V  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table Node  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putVal</span><span class="params">(K key, V value, Node&lt;K,V&gt;[] table)</span> &#123;  </span><br><span class="line">    <span class="comment">//获取插入位置  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key);  </span><br><span class="line">    Node&lt;K, V&gt; node = table[index];  </span><br><span class="line">    <span class="comment">//如果要插入的位置为空，则插入元素  </span></span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;  </span><br><span class="line">        table[index] = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value);  </span><br><span class="line">        size++;  </span><br><span class="line">        <span class="keyword">return</span>;    &#125;  </span><br><span class="line">    <span class="comment">//如果不为空，说明发生了哈希冲突，遍历链表使用链地址法  </span></span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>)&#123;  </span><br><span class="line">        <span class="comment">//如果元素的key和节点的相同，则覆盖  </span></span><br><span class="line">        <span class="keyword">if</span> ((node.key.hashCode() == key.hashCode()) &amp;&amp; (node.key == key || node.key.equals(key)))&#123;  </span><br><span class="line">            node.value = value;  </span><br><span class="line">            <span class="keyword">return</span>;        &#125;  </span><br><span class="line">        node = node.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//新建节点插入链表头部  </span></span><br><span class="line">    Node&lt;K, V&gt; kvNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value, table[index]);  </span><br><span class="line">    table[index] = kvNode;  </span><br><span class="line">    size++;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p><strong>扩容逻辑：</strong></p><ul><li>创建两倍容量的新数组</li><li>将当前桶中的元素重新哈希到新的数组<ul><li>重新MyHashMap设置大小</li><li>将旧的桶数组的元素移到新的桶数组中</li></ul></li><li>将扩容后的数组赋值给原来的桶数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 重新哈希元素  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newNode Node&lt;K,V&gt;[]  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(Node&lt;K,V&gt;[] newNode)</span> &#123;  </span><br><span class="line">    <span class="comment">//重新MyHashMap设置大小  </span></span><br><span class="line">    <span class="built_in">this</span>.size = <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">//将旧的桶数组的元素移到新的桶数组中  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++)&#123;  </span><br><span class="line">        <span class="keyword">if</span> (buckets[i] == <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        Node&lt;K, V&gt; node = buckets[i];  </span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="comment">//将元素放入新的桶数组  </span></span><br><span class="line">            putVal(node.key, node.value, newNode);  </span><br><span class="line">            node = node.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><p><strong>获取元素逻辑：</strong></p><ul><li>通过哈希获取地址</li><li>如果链表存在遍历链表</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 获取元素  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> V  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">    <span class="comment">//获取地址  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key, buckets.length);  </span><br><span class="line">    <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    Node&lt;K, V&gt; node = buckets[index];  </span><br><span class="line">    <span class="keyword">while</span> (node != <span class="literal">null</span>)&#123;  </span><br><span class="line">        <span class="keyword">if</span> ((node.key.hashCode() == key.hashCode()) &amp;&amp; (node.key == key || node.key.equals(key)))&#123;  </span><br><span class="line">            <span class="keyword">return</span> node.value;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//如果链表存在遍历链表  </span></span><br><span class="line">        <span class="keyword">if</span> (node.next != <span class="literal">null</span>)&#123;  </span><br><span class="line">            node = node.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><p><strong>删除元素逻辑：</strong></p><ul><li>如果key存在则删除，不存在直接返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 移除元素  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">    <span class="comment">//获取地址  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key, buckets.length);  </span><br><span class="line">    <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (buckets[index].key.equals(key)) &#123;  </span><br><span class="line">        buckets[index] = buckets[index].next;  </span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// 移除成功，结束操作  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    Node&lt;K, V&gt; node = buckets[index];  </span><br><span class="line">    <span class="keyword">while</span> (node.next != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (node.next.key.equals(key)) &#123;  </span><br><span class="line">            node.next = node.next.next;  </span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 移除成功，结束操作  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        node = node.next; <span class="comment">// 继续遍历链表下一个节点  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyHashMap</span>&lt;K, V&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K, V&gt;&#123;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * 键  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">private</span> K key;  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * 值  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">private</span> V value;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * 后继  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">private</span> Node&lt;K, V&gt; next;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value)</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.key = key;  </span><br><span class="line">            <span class="built_in">this</span>.value = value;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(K key, V value, Node&lt;K, V&gt; next)</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.key = key;  </span><br><span class="line">            <span class="built_in">this</span>.value = value;  </span><br><span class="line">            <span class="built_in">this</span>.next = next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 默认容量  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 默认负载因子  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * MyHashMap的大小  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 桶数组  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Node&lt;K, V&gt;[] buckets;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 无参构造方法，设置桶数组大小为默认容量  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyHashMap</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="built_in">this</span>.buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[DEFAULT_CAPACITY];  </span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 有参构造器，设置桶的容量  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity int  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="title function_">MyHashMap</span><span class="params">(<span class="type">int</span> capacity)</span>&#123;  </span><br><span class="line">        buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[capacity];  </span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 哈希函数，获取哈希地址  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(K key, <span class="type">int</span> length)</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> Math.abs(key.hashCode() &amp; (length - <span class="number">1</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 添加方法  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value V  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (size &gt;= buckets.length * DEFAULT_LOAD_FACTOR) &#123;  </span><br><span class="line">            resize();  </span><br><span class="line">        &#125;  </span><br><span class="line">        putVal(key, value, buckets);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 将元素存入Node数组  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value V  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> table Node  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putVal</span><span class="params">(K key, V value, Node&lt;K,V&gt;[] table)</span> &#123;  </span><br><span class="line">        <span class="comment">//获取插入位置  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key, table.length);  </span><br><span class="line">        Node&lt;K, V&gt; node = table[index];  </span><br><span class="line">        <span class="comment">//如果要插入的位置为空，则插入元素  </span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;  </span><br><span class="line">            table[index] = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value);  </span><br><span class="line">            size++;  </span><br><span class="line">            <span class="keyword">return</span>;        &#125;  </span><br><span class="line">        <span class="comment">//如果不为空，说明发生了哈希冲突，遍历链表使用链地址法  </span></span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="comment">//如果元素的key和节点的相同，则覆盖  </span></span><br><span class="line">            <span class="keyword">if</span> ((node.key.hashCode() == key.hashCode()) &amp;&amp; (node.key == key || node.key.equals(key)))&#123;  </span><br><span class="line">                node.value = value;  </span><br><span class="line">                <span class="keyword">return</span>;            &#125;  </span><br><span class="line">            node = node.next;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//新建节点插入链表头部  </span></span><br><span class="line">        Node&lt;K, V&gt; kvNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(key, value, table[index]);  </span><br><span class="line">        table[index] = kvNode;  </span><br><span class="line">        size++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 扩容  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="comment">//创建两倍容量的新数组  </span></span><br><span class="line">        Node&lt;K, V&gt;[] newNode = <span class="keyword">new</span> <span class="title class_">Node</span>[buckets.length * <span class="number">2</span>];  </span><br><span class="line">        rehash(newNode);  </span><br><span class="line">        buckets = newNode;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 重新哈希元素  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newNode Node&lt;K,V&gt;[]  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(Node&lt;K,V&gt;[] newNode)</span> &#123;  </span><br><span class="line">        <span class="comment">//重新MyHashMap设置大小  </span></span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;  </span><br><span class="line">        <span class="comment">//将旧的桶数组的元素移到新的桶数组中  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++)&#123;  </span><br><span class="line">            <span class="keyword">if</span> (buckets[i] == <span class="literal">null</span>)&#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            Node&lt;K, V&gt; node = buckets[i];  </span><br><span class="line">            <span class="keyword">while</span> (node != <span class="literal">null</span>)&#123;  </span><br><span class="line">                <span class="comment">//将元素放入新的桶数组  </span></span><br><span class="line">                putVal(node.key, node.value, newNode);  </span><br><span class="line">                node = node.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取元素  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> V  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">        <span class="comment">//获取地址  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key, buckets.length);  </span><br><span class="line">        <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        Node&lt;K, V&gt; node = buckets[index];  </span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>)&#123;  </span><br><span class="line">            <span class="keyword">if</span> ((node.key.hashCode() == key.hashCode()) &amp;&amp; (node.key == key || node.key.equals(key)))&#123;  </span><br><span class="line">                <span class="keyword">return</span> node.value;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//如果链表存在遍历链表  </span></span><br><span class="line">            <span class="keyword">if</span> (node.next != <span class="literal">null</span>)&#123;  </span><br><span class="line">                node = node.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 移除元素  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key K  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(K key)</span>&#123;  </span><br><span class="line">        <span class="comment">//获取地址  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key, buckets.length);  </span><br><span class="line">        <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (buckets[index].key.equals(key)) &#123;  </span><br><span class="line">            buckets[index] = buckets[index].next;  </span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 移除成功，结束操作  </span></span><br><span class="line">        &#125;  </span><br><span class="line">        Node&lt;K, V&gt; node = buckets[index];  </span><br><span class="line">        <span class="keyword">while</span> (node.next != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (node.next.key.equals(key)) &#123;  </span><br><span class="line">                node.next = node.next.next;  </span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 移除成功，结束操作  </span></span><br><span class="line">            &#125;  </span><br><span class="line">            node = node.next; <span class="comment">// 继续遍历链表下一个节点  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 返回MyHashMap大小  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        MyHashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">MyHashMap</span>&lt;&gt;();  </span><br><span class="line">        map.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;lyj is test&quot;</span>);  </span><br><span class="line">        map.remove(<span class="string">&quot;test&quot;</span>);  </span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;test&quot;</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring循环依赖</title>
      <link href="/2023/09/07/spring-xun-huan-yi-lai/"/>
      <url>/2023/09/07/spring-xun-huan-yi-lai/</url>
      
        <content type="html"><![CDATA[<h1 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h1><p>循环依赖是指两个或多个模块或组件之间相互依赖，形成一个闭环情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123; </span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> B b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123; </span><br><span class="line"><span class="meta">@Autowired</span> </span><br><span class="line"><span class="keyword">private</span> A a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pPfYDFs"><img src="https://z1.ax1x.com/2023/09/16/pPfYDFs.png" alt="循环依赖"></a></p><h1 id="Spring解决循环依赖的限制条件"><a href="#Spring解决循环依赖的限制条件" class="headerlink" title="Spring解决循环依赖的限制条件"></a>Spring解决循环依赖的限制条件</h1><ol><li>出现循环依赖的Bean必须是单例Bean，原型Bean不可以<br> 原型Bean每次获取的时候都会创建一个新的Bean，假设A、B循环依赖了，A里面要注入B，B里面要注入A，注入一次就会产生一个新的Bean，最终会无穷无尽。</li><li>不全是使用构造器注入的<ul><li>均采用setter方法注入的，可以被Spring解决</li><li>均采用构造器方式注入的，不可以被Spring解决</li><li>setter和构造器两种方式都使用，需要具体分析</li></ul></li></ol><blockquote><p>使用构造器注入时，当A依赖B，而B又依赖A，Spring会尝试先创建A。但是，在创建A时，由于它依赖的B还没有创建完成，无法传递给构造器进行注入，从而导致循环依赖无法被解决。</p></blockquote><h1 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h1><p>Spring通过三级缓存来解决循环依赖问题。</p><ol><li>单例对象缓存(singletonObjects)：存放完整的Bean对象，包括所有属性都已经注入完成的Bean。</li><li>早期对象缓存(earlySingletonObjects)：存放半成品对象，即Bean的实例化和依赖注入已经完成，但是初始化还未执行完成的Bean。</li><li>单例工厂缓存(singletonFactories)：存放用于创建完整Bean对象的Factory对象。</li></ol><h2 id="Spring-解决循环依赖的过程"><a href="#Spring-解决循环依赖的过程" class="headerlink" title="Spring 解决循环依赖的过程"></a>Spring 解决循环依赖的过程</h2><ol><li>Spring容器启动之后，开始创建Bean。</li><li>容器根据配置信息<strong>实例化完成A，但是还没有初始化</strong>，紧接着A与一个ObjectFactory对象放入三级缓存。<strong>如果A被AOP代理，通过这个工厂获取到的就是A代理后的对象，如果没有代理，工厂最后获取到的就是A的实例化对象</strong></li><li>初始化A，为A属性赋值，发现要依赖注入B，于是将B实例化，在B还未初始化的时候将B和一个ObjectFactory对象放入三级缓存</li><li>初始化B，发现需要依赖注入A，此时在三级缓存中找到了A与<code>ObjectFactory&lt;?&gt; singletonFactory</code>，通过<code>singletonFactory.getObject()</code>，得到A的引用，并将其存入二级缓存，且从三级缓存移除。</li><li>B从二级缓存中获取到不完整的A，并注入到B中，B初始化完成，<strong>并将B在二级缓存、三级缓存中的引用清除，同时将实例化完成的B存入一级缓存</strong></li><li>B实例化完成后，继续A的初始化，A从一级缓存中获取到B，同样，<strong>并将A二级缓存、三级缓存中的引用清除，同时将实例化完成的A存入一级缓存</strong></li><li>A和B实例完成，并且二级缓存和三级缓存中都没有A和B了<br><a href="https://imgse.com/i/pPfYrYn"><img src="https://z1.ax1x.com/2023/09/16/pPfYrYn.png" alt="Spring解决循环依赖"></a></li></ol><h1 id="为什么要三级缓存？二级为什么不可以？"><a href="#为什么要三级缓存？二级为什么不可以？" class="headerlink" title="为什么要三级缓存？二级为什么不可以？"></a>为什么要三级缓存？二级为什么不可以？</h1><p>三级缓存中存放的是生成具体对象的匿名内部类，在获取对象的时候，既可以生成代理对象，又可以生成普通的对象，使用三级缓存可以保证不管什么时候使用的都是一个对象。</p><p>如果只有二级缓存的情况，往二级缓存中放一个普通Bean对象，在Bean初始化的时候，通过<code>BeanPostProcessor</code>生成代理对象之后，会覆盖掉二级缓存中普通Bean对象，从而导致获取的Bean对象不一致。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Bean的生命周期</title>
      <link href="/2023/09/07/spring-bean-de-sheng-ming-zhou-qi/"/>
      <url>/2023/09/07/spring-bean-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h1><p>在Java应用中，普通的Java Bean的生命周期很简单。使用关键字<code>new</code>对Bean进行实例化，之后Bean就可使用了，当Bean不在被使用就会被Java的垃圾回收机制回收。概括的说就是两个阶段：</p><ol><li>实例化</li><li>不使用之后垃圾回收</li></ol><p>Spring的Bean的生命周期则比较复杂，Spring的Bean由<code>IOC</code>容器进行实例化、组装和管理。<code>IOC(Inversion of Control，控制反转)</code>是一种软件设计原则，用于实现松耦合和可维护的代码结构。</p><blockquote><p>Spring Bean的生命周期主要分为四个部分</p></blockquote><ol><li>实例化(Instantiation)</li><li>属性赋值(Populate)</li><li>初始化(Initialization)</li><li>销毁(Destruction)<br><a href="https://imgse.com/i/pPfaWg1"><img src="https://z1.ax1x.com/2023/09/16/pPfaWg1.png" alt="生命周期四阶段"></a><br><strong>Spring Bean详细生命周期：</strong><br><a href="https://imgse.com/i/pPfafjx"><img src="https://z1.ax1x.com/2023/09/16/pPfafjx.png" alt="Spring-Bean生命周期"></a></li></ol><p>在Spring框架中，Bean的生命周期经历了以下几个阶段：</p><ol><li>实例化(Instantiation)：Spring容器根据配置信息或注解创建Bean的实例。</li><li>属性赋值(Populate)：Spring容器将属性值和依赖注入到Bean中。</li><li>设置Bean名称：如果Bean实现了<code>BeanNameAware</code>接口，将会调用<code>setBeanName()</code>方法，把Bean的名称传递给它。</li><li>设置BeanFactory的引用：如果Bean实现了<code>BeanFactoryAware</code>接口，将会调用<code>setBeanFactory()</code>方法，把Bean所在的BeanFactory传递给它。</li><li>设置其他自定义上下文：如果Bean实现了<code>ApplicationContextAware</code>接口，将会调用<code>setApplicationContext()</code>方法，把ApplicationContext传递给它。</li><li>Bean后处理(BeanPostProcessor)：Spring容器会对所有的BeanPostProcessor进行初始化，这些后处理可以对Bean实例化前后进行一些自定义操作。</li><li>初始化(Initialization)：如果Bean实现了<code>InitializingBean</code>接口，将会调用<code>afterPropertiesSet()</code>方法来执行自定义初始化逻辑。另外，还可以通过配置文件使用<code>init-method</code>属性制定Bean的初始化方法。</li><li>自定义初始化(Custom Initialization)：在Bean初始化之后，可以执行一些自定义的初始化逻辑。</li><li>销毁(Destruction)：如果Bean实现了<code>DisposableBean</code>接口，将会调用<code>destroy()</code>方法来执行自定义销毁逻辑。同样，还可以通过配置文件使用<code>destory-method</code>属性制定Bean的初始化方法。</li><li>自定义销毁(Custom Destruction)：在 Bean 销毁之前，可以执行一些自定义的销毁逻辑。<blockquote><p>Bean的生命周期可以通过配置方式进行管理，例如使用XML配置或者是注解。同时，Spring还提供了各种扩展点和回调接口，使开发者能够在Bean的生命周期的不同阶段进行定制化操作。</p></blockquote></li></ol><h1 id="扩展点"><a href="#扩展点" class="headerlink" title="扩展点"></a>扩展点</h1><p>Spring如果监测到Bean实现了<code>Aware</code>接口，则会为其注入相应的依赖。<strong>因此通过让Bean实现<code>Aware</code>接口，能够让Bean获得相应的Spring容器资源</strong><br><strong><code>Aware</code>接口：</strong></p><ol><li>BeanNameAware：注入当前Bean对应的名称</li><li>BeanClassLoaderAware：注入加载当前Bean的ClassLoader</li><li>BeanFactoryAware：注入当前BeanFactory的引用</li></ol><h2 id="BeanPostProcessor"><a href="#BeanPostProcessor" class="headerlink" title="BeanPostProcessor"></a>BeanPostProcessor</h2><p><code>BeanPostProcessor</code>是Spring的一个重要的接口，用于在Bean初始化前后进行扩展和自定义处理。它是Bean生命周期的一部分，主要用于在容器实例化Bean和将其添加到应用程序上下文之后，以及Bean初始化前后对Bean的定制化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"><span class="keyword">default</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>postProcessBeforeInitialization(Object bean, String beanName)：Bean初始化之前调用该方法。接收两个参数：正在初始化的Bean的对象和Bean的名称。可以对此方法中的Bean进行修改和增强。如果返回的对象不为null，则该对象作为最终的Bean实例。</li><li>postProcessAfterInitialization(Object bean, String beanName)：在Bean初始化之后调用该方法。接收两个参数：已经完成初始化的Bean对象和Bean的名称。可以对此方法中的Bean进行修改和增强。如果返回的对象不为null，则该对象作为最终的Bean实例。</li></ol><p>通过实现<code>BeanPostProcessor</code>接口，在Spring容器实例化Bean和初始化Bean的过程中介入，可以实现一些功能：</p><ul><li>属性值的校验、修正和增强。</li><li>动态代理，用于实现AOP的切面</li><li>注入依赖关系的解析和处理</li><li>条件化的Bean的创建和初始化</li><li>对Bean进行包装或装饰</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存结构</title>
      <link href="/2023/09/05/jvm-nei-cun-jie-gou/"/>
      <url>/2023/09/05/jvm-nei-cun-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>JVM在运行Java程序的过程中会把管理的内存分成不同的数据区域<br><a href="https://imgse.com/i/pPfYqOO"><img src="https://z1.ax1x.com/2023/09/16/pPfYqOO.png" alt="JVM"></a><br><strong>线程私有：</strong></p><ul><li>虚拟机栈</li><li>本地方法栈</li><li>程序计数器</li></ul><p><strong>线程共享：</strong></p><ul><li>堆</li><li>方法区（元空间）</li><li>直接内存</li></ul><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>Java虚拟机栈是一个线程私有的内存区域，用于存储每个方法执行时的<strong>局部变量表、操作数栈、动态链接、方法返回地址</strong>。每个方法在执行时都会创建一个栈帧，当方法执行完毕后，对应的栈帧将会出栈销毁。<br><strong>局部变量表</strong>主要存放编译器可知的各种数据类型(基本数据类型)和对象引用<br><strong>操作数栈</strong>用于在方法执行过程中进行数据操作和计算。操作数栈采用栈的数据结构，用于存储方法执行过程中的局部变量、中间结果和操作数。<br><strong>动态链接</strong>是指在方法调用过程中进行方法的查找和链接，实现方法的动态绑定。主要用于支持Java程序中多态性和动态方法调用<br><strong>方法返回地址</strong>是指在方法调用过程中，用于记录方法返回的地址信息。当一个方法被调用时，JVM会为该方法创建一个新的栈帧，并将其推入虚拟机栈中。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈与虚拟机栈类似，不同的是它主要是为执行本地方法服务(Native Method 使用C&#x2F;C++编写的方法)。</p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器是一块比较小的内存空间，用于<strong>记录当前线程执行的字节码指令地址</strong>。当线程执行Java方法时，程序计数器用于指向下一条要执行的指令。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是JVM中最大的一块内存，用于存储对象实例和数组。堆被所有线程共享，因此在创建Java对象时，对象实例存储在堆中。<br><strong>在JDK7及之前的版本中，堆主要分为三部分：</strong></p><ol><li>新生代</li><li>老年代</li><li>永久代</li></ol><p><strong>在JDK8之后，永久代已经被元空间取代，元空间使用的是本地内存。</strong><br><a href="https://imgse.com/i/pPfYb6K"><img src="https://z1.ax1x.com/2023/09/16/pPfYb6K.png" alt="Heap"></a></p><blockquote><p>对象首先都会在Eden区进行分配，在经过一次Young GC之后，如果对象还存活，则会进入<code>from</code>或者<code>to</code>，并且对象的年龄也会随之增加，在对象的年龄达到一定的程度之后，对象将会进入老年代</p></blockquote><h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>字符串常量池是Java中一个特殊的内存区域，用于存储字符串常量。位于堆内存中，并在在JVM启动时就被创建。<strong>字符串常量池是JVM为了提升字符串的性能和减少内存消耗而开辟的一块区域，主要避免字符串重复创建</strong><br><a href="https://imgse.com/i/pPfYHl6"><img src="https://z1.ax1x.com/2023/09/16/pPfYHl6.png" alt="Heap"></a><br><strong>字符串常量池的主要特点：</strong></p><ol><li>字符串常量共享：字符串常量池中的字符串对象是唯一的，即相同的字符串字面量只会在常量池中存储一份。这是通过使用字符串的<code>intern()</code>方法将字符串对象添加到常量池中实现的。</li><li>提高性能和节省内存：由于字符串常量池中的字符串对象共享，因此当多个字符串字面量具有相同的内容时，它们可以引用一个对象，避免重复创建字符串对象，从而提高性能并节省内存。</li><li>存储在堆中：尽管字符串常量池位于堆中，但与普通的Java对象不同，字符串常量池中的字符串对象是在编译期间确定并加载到常量池中的。它们在程序运行期间一直存在，不会被来及回收</li></ol><h2 id="方法区-元空间"><a href="#方法区-元空间" class="headerlink" title="方法区(元空间)"></a>方法区(元空间)</h2><p>方法区是线程共享的内存区域，用于存储类的<strong>类信息、字段信息、方法信息、常量、静态变量、编译器编译后的代码等数据</strong>。JDK 8及之前版本中方法区又被称为“永久代”（Permanent Generation），但在JDK 8之后已经被改为“元空间”（MetaSpace）。<br><strong>永久代被移除的原因：</strong></p><ol><li>永久代内存不足导致内存溢出：永久代中存储的内容会随着应用的启动和停止不断增加，直到达到 PermGen 区的上限。在某些应用中，如果没有进行充分的调优，就很容易导致 PermGen 内存溢出。</li><li>调优复杂：由于 PermGen 区本质上是 JVM 堆区的一部分，因此在进行内存调优时非常麻烦。而且需要根据具体应用情况计算出合理的内存大小，比较繁琐。</li><li>元空间无需考虑内存大小：元空间是 Java 虚拟机内部的一块本地内存，不再使用 JVM 堆区的永久代，可以自动调整大小。这样就避免了内存溢出和调优的烦恼。</li><li>元空间允许热部署：元空间还可以支持热部署，也就是在运行期间动态更新类的定义，而不需要重新启动应用。</li></ol><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分，用于存储编译器生成的各种字面量和符号引用。每个类都有自己的运行时常量池，其中包含了该类所使用的常量、变量和方法的符号引用等信息。<br>运行时常量池的特点：</p><ol><li>动态性：运行时常量池是在类加载过程中动态创建的。在加载过程中，字节码文件中的常量会被解析和转换成具体的内存结构，并存放在运行时常量池中。</li><li>独立性：每个类都有自己的运行时常量池，它与其他类的运行时常量池相互独立，存储着该类的常量信息。</li><li>存放常量：运行时常量池主要用于存放类文件中的常量。这些常量包括字符串常量、字面量和符号引用。通过运行时常量池，可以在运行时通过索引或其他方式访问和使用这些常量。</li><li>加速性能：运行时常量池可以提高程序的执行效率。在类加载的过程中，一些常量会被提前解析和计算，并存放在运行时常量池中。这样，在实际运行过程中可以直接使用运行时常量池中的常量，避免了重复计算和解析的开销。</li></ol><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>JVM中的直接内存是一种使用堆外内存（Off-heap）来实现的内存分配方式，也称为堆外内存（Off-heap Memory Allocation）。<br><strong>直接内存的优势：</strong></p><ol><li>无需垃圾回收：Java堆内存需要进行垃圾回收，会对程序的性能产生一定影响。而直接内存不受JVM堆空间大小限制，无需进行垃圾回收，避免了大量的垃圾回收操作，从而提高了程序的性能和稳定性。</li><li>更高的访问速度：由于直接内存在堆外分配，因此不会占用JVM堆空间，也不会受到JVM堆空间大小的限制。同时，由于直接内存采用了DMA（直接内存访问）技术，可以实现更高效的读取和写入操作。</li><li>更大的空间：由于直接内存位于堆外，因此不受JVM堆大小的限制，可以使用更多的内存空间。并且，直接内存的分配和释放速度快，不会受到堆内存碎片等问题的影响，从而可以更好地支持大规模的、高性能的应用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell编程</title>
      <link href="/2023/08/27/shell-bian-cheng/"/>
      <url>/2023/08/27/shell-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="什么是Shell？"><a href="#什么是Shell？" class="headerlink" title="什么是Shell？"></a>什么是Shell？</h2><p>shell编程就是对一堆Linux命令的逻辑化处理。</p><h2 id="Shell编程Hello-World"><a href="#Shell编程Hello-World" class="headerlink" title="Shell编程Hello World"></a>Shell编程Hello World</h2><ol><li>新建文件<code>touch helloworld.sh</code></li><li>添加执行权限<code>chmod +x helloworld.sh</code></li><li>编辑sh脚本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;helloworld&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在shell种<code>#</code>表示注释。shell的第一行比较特殊，一般都会以<code>#!</code>开头来指定使用的shell类型</p></blockquote></li></ol><p><strong>shell的类型：</strong></p><ul><li>bash</li><li>zsh</li><li>fish</li></ul><ol start="4"><li>运行脚本<code>./helloworld.sh</code>。运行shell脚本需要添加<code>./</code>的路径，直接使用<code>helloworld.sh</code>，Linux系统回去PATH里寻找，一般只有<code>/bin</code>, <code>/sbin</code>，<code>/usr/bin</code>，<code>/usr/sbin</code>在PATR里，因此直接使用<code>helloworld.sh</code>是找不到命令的</li></ol><h2 id="Shell的变量"><a href="#Shell的变量" class="headerlink" title="Shell的变量"></a>Shell的变量</h2><p><strong>Shell的变量一般分为三种：</strong></p><ol><li><strong>自定义变量</strong>：就在当前shell种有效，其他shell中无效。</li><li><strong>Linux定义的环境变量：</strong> 例如<code>PATH</code>，<code>HOME</code>，使用<code>env</code>命令可以查看所有的环境变量，而<code>set</code>命令既可以查看环境变量也可以查看自定义变量。</li><li><strong>Shell变量：</strong> Shell变量是有Shell程序设置的特殊变量。Shell变量中有一部分是环境变量，一部分是局部变量<br><strong>常用的环境变量：</strong><blockquote><p>PATH 决定了 shell 将到哪些目录中寻找命令或程序<br>  HOME 当前用户主目录<br>  HISTSIZE 　历史记录数<br>  LOGNAME 当前用户的登录名<br>  HOSTNAME 　指主机的名称<br>  SHELL 当前用户 Shell 类型<br>  LANGUAGE 　语言相关的环境变量，多语言可以修改此环境变量<br>  MAIL 　当前用户的邮件存放目录<br>  PS1 　基本提示符，对于 root 用户是#，对于普通用户是$</p></blockquote></li></ol><h3 id="使用Linux定义的环境变量"><a href="#使用Linux定义的环境变量" class="headerlink" title="使用Linux定义的环境变量"></a>使用Linux定义的环境变量</h3><ol><li><code>echo $HOME</code>：查看当前用户目录</li><li><code>echo $SHELL</code> 查看当前用户的Shell类型</li></ol><h3 id="使用自定义变量"><a href="#使用自定义变量" class="headerlink" title="使用自定义变量"></a>使用自定义变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">hello=&quot;helloworld&quot;</span><br><span class="line">echo $hello</span><br></pre></td></tr></table></figure><p><strong>Shell变量名的命名规范：</strong></p><ul><li>命名只能使用英文字母，数字和下划线，首字母不能以数字开头，但可以使用下划线开头</li><li>中间不能有空格，但可以使用下划线</li><li>不能使用标点符号</li><li>不能使用bash的关键字</li></ul><h3 id="Shell的字符串"><a href="#Shell的字符串" class="headerlink" title="Shell的字符串"></a>Shell的字符串</h3><p>Shell的字符串可以是单引号，也可以是双引号。在单引号中所有的特殊字符(<code>$</code>、<code>\</code>等)都没有特殊含义。在双引号中，除了”$”、”&quot;、反引号和感叹号（需开启 <code>history expansion</code>），其他的字符没有特殊含义。<br><strong>单引号：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=&#x27;lyj&#x27;</span><br><span class="line">hello=&#x27;Hello, My name is $name!&#x27;</span><br><span class="line">echo $hello</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, My name is $name!</span><br></pre></td></tr></table></figure><p><strong>双引号：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=&#x27;lyj&#x27;</span><br><span class="line">hello=&quot;Hello, My name is $name!&quot;</span><br><span class="line">echo $hello</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, My name is lyj!</span><br></pre></td></tr></table></figure><h4 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h4><h5 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">name=&quot;lyj&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用双引号拼接</span></span><br><span class="line">greeting=&quot;hello, &quot;$name&quot; !&quot;</span><br><span class="line">greeting_1=&quot;hello, $&#123;name&#125; !&quot;</span><br><span class="line">echo $greeting  $greeting_1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用单引号拼接</span></span><br><span class="line">greeting_2=&#x27;hello, &#x27;$name&#x27; !&#x27;</span><br><span class="line">greeting_3=&#x27;hello, $&#123;name&#125; !&#x27;</span><br><span class="line">echo $greeting_2  $greeting_3</span><br></pre></td></tr></table></figure><h5 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取字符串长度</span></span><br><span class="line">name=&quot;lyj&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一</span></span><br><span class="line">echo $&#123;#name&#125; #输出 10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">expr length &quot;$name&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>expr</code>命令时，表达式中的运算符左右必须包含空格，如果不包含空格，将会输出表达式本身。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr 5+1   // 直接输出 5+1</span><br><span class="line">expr 5 + 1       // 输出 6</span><br></pre></td></tr></table></figure><blockquote><p>对于某些运算符，还需要我们使用符号<code>\</code>进行转义，否则就会提示语法错误。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expr 5 * 1       // 输出错误</span><br><span class="line">expr 5 \* 1      // 输出5</span><br></pre></td></tr></table></figure><h5 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从字符串第 1 个字符开始往后截取 10 个字符</span></span><br><span class="line">str=&quot;abcdefghij is a great man&quot;</span><br><span class="line">echo $&#123;str:0:10&#125; #输出:abcdefghij</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">author:amau</span></span><br><span class="line"></span><br><span class="line">var=&quot;https://www.runoob.com/linux/linux-shell-variable.html&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%表示删除从后匹配, 最短结果</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">%%表示删除从后匹配, 最长匹配结果</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">#表示删除从头匹配, 最短结果</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="comment">##表示删除从头匹配, 最长匹配结果</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注: *为通配符, 意为匹配任意数量的任意字符</span></span><br><span class="line">s1=$&#123;var%%t*&#125; #h</span><br><span class="line">s2=$&#123;var%t*&#125;  #https://www.runoob.com/linux/linux-shell-variable.h</span><br><span class="line">s3=$&#123;var%%.*&#125; #http://www</span><br><span class="line">s4=$&#123;var#*/&#125;  #/www.runoob.com/linux/linux-shell-variable.html</span><br><span class="line">s5=$&#123;var##*/&#125; #linux-shell-variable.html</span><br></pre></td></tr></table></figure><h3 id="Shell的数组"><a href="#Shell的数组" class="headerlink" title="Shell的数组"></a>Shell的数组</h3><p>bash只支持一维数组不支持多维数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">array=(1 2 3 4 5);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取数组长度</span></span><br><span class="line">length=$&#123;#array[@]&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者</span></span><br><span class="line">length2=$&#123;#array[*]&#125;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出数组长度</span></span><br><span class="line">echo $length #输出：5</span><br><span class="line">echo $length2 #输出：5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出数组第三个元素</span></span><br><span class="line">echo $&#123;array[2]&#125; #输出：3</span><br><span class="line">unset array[1]# 删除下标为1的元素也就是删除第二个元素</span><br><span class="line">for i in $&#123;array[@]&#125;;do echo $i ;done # 遍历数组，输出：1 3 4 5</span><br><span class="line">unset array; # 删除数组中的所有元素</span><br><span class="line">for i in $&#123;array[@]&#125;;do echo $i ;done # 遍历数组，数组元素为空，没有任何输出内容</span><br></pre></td></tr></table></figure><h2 id="Shell的基本运算符"><a href="#Shell的基本运算符" class="headerlink" title="Shell的基本运算符"></a>Shell的基本运算符</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><p><a href="https://imgse.com/i/pPftC1P"><img src="https://z1.ax1x.com/2023/09/16/pPftC1P.png" alt="算数运算"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=3;b=3;</span><br><span class="line">val=`expr $a + $b`</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出：Total value : 6</span></span><br><span class="line">echo &quot;Total value : $val&quot;</span><br></pre></td></tr></table></figure><h3 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h3><p><a href="https://imgse.com/i/pPfa1nf"><img src="https://z1.ax1x.com/2023/09/16/pPfa1nf.png" alt="关系运算"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">score=90;</span><br><span class="line">maxscore=100;</span><br><span class="line">if [ $score -eq $maxscore ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;A&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;B&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p><a href="https://imgse.com/i/pPftSfI"><img src="https://z1.ax1x.com/2023/09/16/pPftSfI.png" alt="逻辑运算"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=$(( 1 &amp;&amp; 0))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出：0；逻辑与运算只有相与的两边都是1，与的结果才是1；否则与的结果是0</span></span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><p><a href="https://imgse.com/i/pPftP6f"><img src="https://z1.ax1x.com/2023/09/16/pPftP6f.png" alt="布尔运算"></a></p><h3 id="字符串运算"><a href="#字符串运算" class="headerlink" title="字符串运算"></a>字符串运算</h3><p><a href="https://imgse.com/i/pPfaQjP"><img src="https://z1.ax1x.com/2023/09/16/pPfaQjP.png" alt="字符串运算"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=&quot;abc&quot;;</span><br><span class="line">b=&quot;efg&quot;;</span><br><span class="line">if [ $a = $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 等于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;a 不等于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="文件测试运算"><a href="#文件测试运算" class="headerlink" title="文件测试运算"></a>文件测试运算</h3><p><a href="https://imgse.com/i/pPft9pt"><img src="https://z1.ax1x.com/2023/09/16/pPft9pt.png" alt="文件测试运算"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">file=&quot;/usr/learnshell/test.sh&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否可读</span></span><br><span class="line">if [ -r $file ]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断文件是否可写</span></span><br><span class="line">if [ -w $file ]</span><br></pre></td></tr></table></figure><h2 id="Shell的流程控制"><a href="#Shell的流程控制" class="headerlink" title="Shell的流程控制"></a>Shell的流程控制</h2><h3 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h3><p>shell的if条件语句不能包含空语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">a=3;</span><br><span class="line">b=9;</span><br><span class="line">if [ $a -eq $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 等于 b&quot;</span><br><span class="line">elif [ $a -gt $b ]</span><br><span class="line">then</span><br><span class="line">   echo &quot;a 大于 b&quot;</span><br><span class="line">else</span><br><span class="line">   echo &quot;a 小于 b&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="for循环语句"><a href="#for循环语句" class="headerlink" title="for循环语句"></a>for循环语句</h3><p><strong>输出列表的数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for loop in 1 2 3 4 5</span><br><span class="line">do</span><br><span class="line">    echo &quot;The value is: $loop&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>产生十个随机数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &#123;0..9&#125;;</span><br><span class="line">do</span><br><span class="line">   echo $RANDOM;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>输出一到五</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">length=5</span><br><span class="line">for((i=1;i&lt;=length;i++));do</span><br><span class="line">    echo $i;</span><br><span class="line">done;</span><br></pre></td></tr></table></figure><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">int=1</span><br><span class="line">while(( $int&lt;=5 ))</span><br><span class="line">do</span><br><span class="line">    echo $int</span><br><span class="line">    let &quot;int++&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="Shell的函数"><a href="#Shell的函数" class="headerlink" title="Shell的函数"></a>Shell的函数</h2><h3 id="没有参数和返回值的函数"><a href="#没有参数和返回值的函数" class="headerlink" title="没有参数和返回值的函数"></a>没有参数和返回值的函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">hello()&#123;</span><br><span class="line">    echo &quot;这是我的第一个 shell 函数!&quot;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;-----函数开始执行-----&quot;</span><br><span class="line">hello</span><br><span class="line">echo &quot;-----函数执行完毕-----&quot;</span><br></pre></td></tr></table></figure><h3 id="有返回值的函数"><a href="#有返回值的函数" class="headerlink" title="有返回值的函数"></a>有返回值的函数</h3><p><strong>输入两个数字相加并返回结果:</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">funWithReturn()&#123;</span><br><span class="line">    echo &quot;输入第一个数字: &quot;</span><br><span class="line">    read aNum</span><br><span class="line">    echo &quot;输入第二个数字: &quot;</span><br><span class="line">    read anotherNum</span><br><span class="line">    echo &quot;两个数字分别为 $aNum 和 $anotherNum !&quot;</span><br><span class="line">    return $(($aNum+$anotherNum))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line">echo &quot;输入的两个数字之和为 $?&quot;</span><br></pre></td></tr></table></figure><h3 id="有参数的函数"><a href="#有参数的函数" class="headerlink" title="有参数的函数"></a>有参数的函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">funWithParam()&#123;</span><br><span class="line">    echo &quot;第一个参数为 $1 !&quot;</span><br><span class="line">    echo &quot;第二个参数为 $2 !&quot;</span><br><span class="line">    echo &quot;第十个参数为 $10 !&quot;</span><br><span class="line">    echo &quot;第十个参数为 $&#123;10&#125; !&quot;</span><br><span class="line">    echo &quot;第十一个参数为 $&#123;11&#125; !&quot;</span><br><span class="line">    echo &quot;参数总数有 $# 个!&quot;</span><br><span class="line">    echo &quot;作为一个字符串输出所有参数 $* !&quot;</span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2023/08/27/juc/"/>
      <url>/2023/08/27/juc/</url>
      
        <content type="html"><![CDATA[<h1 id="JUC"><a href="#JUC" class="headerlink" title="JUC"></a>JUC</h1><h2 id="1、什么是JUC"><a href="#1、什么是JUC" class="headerlink" title="1、什么是JUC"></a>1、什么是JUC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent</span><br><span class="line">java.util.concurrent.atomic</span><br><span class="line">java.util.concurrent.locks</span><br></pre></td></tr></table></figure><p>java.util 工具包</p><p><strong>业务：普通的线程代码Thread</strong></p><p><strong>Runnable</strong>  没有返回值，效率相比Callable较低</p><h2 id="2、线程和进程"><a href="#2、线程和进程" class="headerlink" title="2、线程和进程"></a>2、线程和进程</h2><blockquote><p>线程、进程</p></blockquote><p>进程：一个程序，QQ.ext Music.exe 程序的集合</p><p>一个进程往往可以包含多个线程，至少包含一个</p><p>Java默认有几个线程？ 2个 main GC</p><p>线程：开了一个进程Typora，写字，自动保存(线程负责)</p><p>对于Java而言：Thread   Runnable  Callable</p><p><strong>Java真的可以开启线程吗？</strong> 开不了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">        * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">        * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">        * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">        * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">       group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           start0();</span><br><span class="line">           started = <span class="literal">true</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                   group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">               <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                 it will be passed up the call stack */</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//本地方法，底层的c++, Java无法操作硬件</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><blockquote><p>并发、并行</p></blockquote><p>并发编程：并发、并行</p><p>并发（多线程操作一个资源）</p><ul><li>CPU一核，模拟出来多条线程，快速交替</li></ul><p>并行（多个人一起行走）</p><ul><li>CPU多核，多个线程可以同时执行: 线程池</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取cpu的核数</span></span><br><span class="line">        <span class="comment">//cpu密集型，IO密集型</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并发编程的本质：<strong>充分利用cup的资源</strong></p><blockquote><p>线程有几个状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//新生</span></span><br><span class="line">        NEW,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行</span></span><br><span class="line">        RUNNABLE,</span><br><span class="line"></span><br><span class="line">      <span class="comment">//阻塞</span></span><br><span class="line">        BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//等待</span></span><br><span class="line">        WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时等待</span></span><br><span class="line">        TIMED_WAITING,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//终止</span></span><br><span class="line">        TERMINATED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>wait&#x2F;sleep区别</p></blockquote><ol><li><p><strong>来自不同的类</strong></p><p>wait &#x3D;&gt; Object</p><p>sleep &#x3D;&gt; Thread</p></li><li><p><strong>关于锁的释放</strong></p><p>wait会释放锁,sleep睡觉了,抱着锁睡觉,不会释放</p></li><li><p><strong>使用的范围是不同的</strong></p><p>wait</p><p><code>wait必须在同步代码块中</code></p><p>sleep可以在任何地方睡</p></li><li><p><strong>是否需要捕获异常</strong></p><p>wait不需要捕获异常</p><p>sleep必须捕获异常</p></li></ol><h2 id="3、Lock锁-重点"><a href="#3、Lock锁-重点" class="headerlink" title="3、Lock锁(重点)"></a>3、Lock锁(重点)</h2><blockquote><p>传统Synchronize</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//并发：多个线程操作一个资源类</span></span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源类 oop</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性、方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖票的方式</span></span><br><span class="line"><span class="comment">     * synchronized 本质：队列，锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出了&quot;</span> + (number--) + <span class="string">&quot;票，剩余：&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lock</p></blockquote><p>公平锁: 十分公平</p><p><strong>非公平锁: 十分不公平,可以插队(默认)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaleTicketDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//并发：多个线程操作一个资源类</span></span><br><span class="line">        <span class="type">Ticket2</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源类 oop</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket2</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性、方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 卖票的方式</span></span><br><span class="line"><span class="comment">     * synchronized 本质：队列，锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//加锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//业务代码</span></span><br><span class="line">            <span class="keyword">if</span>(number &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出了&quot;</span> + (number--) + <span class="string">&quot;票，剩余：&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Synchronized 和Lock区别</p></blockquote><ol><li><p>Synchronized 内置的Java关键字,Lock是一个Java类</p></li><li><p>Synchronized 无法判断锁的状态,Lock可以判断是否获取到锁</p></li><li><p>Synchronized 会自动释放锁,Lock必须要手动释放锁! 如果不释放会<strong>死锁</strong></p></li><li><p>Synchronized线程1(获得锁、阻塞)、线程2（等待，傻傻的等待）；Lock锁就不一定会等待下去</p></li><li><p>Synchronized 可重入锁，不可以中断，非公平的；lock，可重入锁，可以判断锁，非公平（可以自己设置）</p></li><li><p>Synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步方法</p></li></ol><h2 id="4、生产者和消费者问题"><a href="#4、生产者和消费者问题" class="headerlink" title="4、生产者和消费者问题"></a>4、生产者和消费者问题</h2><blockquote><p>生产者和消费者问题 Synchronized版</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.increment();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数字，资源类</span></span><br><span class="line"><span class="comment"> * 等待、业务、通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * +1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        <span class="keyword">if</span>(number != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number ++;</span><br><span class="line">        <span class="comment">//通知其他线程，我+1完成了</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(number == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="built_in">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        number --;</span><br><span class="line">        <span class="comment">//通知其他线程，我-1完成了</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>存在a,b,c,d四个线程！虚假唤醒问题</p></blockquote><p>if 改为 while</p><blockquote><p>JUC版的生产者和消费者</p></blockquote><p>通过lock可以找到condition</p><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Data2</span> <span class="variable">data2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data2.increment();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data2.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data2.increment();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    data2.decrement();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;D&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data2</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="type">Condition</span> <span class="variable">condition</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * +1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number ++;</span><br><span class="line">            <span class="comment">//通知其他线程，我+1完成了</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125;</span><br><span class="line">            number --;</span><br><span class="line">            <span class="comment">//通知其他线程，我-1完成了</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;&quot;</span> + number);</span><br><span class="line">            condition.signalAll();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任何一个新的技术，绝对不是仅仅只是覆盖了原来的技术，优势和补充</strong></p><blockquote><p>Condition精准的通知</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Data3</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Data3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printA();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printB();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                data.printC();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Data3</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition1</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition2</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">condition3</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printA</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//等待</span></span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;AAA&quot;</span>);</span><br><span class="line">            number = <span class="number">2</span>;</span><br><span class="line">            condition2.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printB</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">2</span>)&#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;BBB&quot;</span>);</span><br><span class="line">            number = <span class="number">3</span>;</span><br><span class="line">            condition3.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printC</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (number != <span class="number">3</span>)&#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;=&gt;CCC&quot;</span>);</span><br><span class="line">            number = <span class="number">1</span>;</span><br><span class="line">            condition1.signal();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生产线： 下单-》支付-》交易-》物流</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、8锁现象"><a href="#5、8锁现象" class="headerlink" title="5、8锁现象"></a>5、8锁现象</h2><p>如何判断锁是谁！永远的知道，什么是锁，锁到底锁的是谁？</p><h3 id="深刻理解锁"><a href="#深刻理解锁" class="headerlink" title="深刻理解锁"></a>深刻理解锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/30 14:21</span></span><br><span class="line"><span class="comment"> * 8锁，就是关于锁的8个问题</span></span><br><span class="line"><span class="comment"> * 1、标准情况下：两个线程先打印 发短信还是 打电话？</span></span><br><span class="line"><span class="comment"> * 2.发短信延迟4秒，两个线程是先打印发短信还是打电话 发短信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronize 锁的对象是方法的调用者</span></span><br><span class="line"><span class="comment">     * 两个方法，谁先拿到谁先执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sendSms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone1</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone1</span>();</span><br><span class="line">        <span class="type">Phone1</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone1</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone1.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * synchronize 锁的对象是方法的调用者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sendSms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有锁 ，不受锁的影响</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone1.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span> &#123;</span><br><span class="line">    <span class="comment">//static静态方法</span></span><br><span class="line">    <span class="comment">//类一加载就有了，锁的是class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sendSms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/30 14:46</span></span><br><span class="line"><span class="comment"> * 7.1个静态同步方法，1个普通同步方法，一个对象，先打印发短信还是打电话</span></span><br><span class="line"><span class="comment"> * 8.两个对象是先打印打电话还是发短信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone3</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone3</span>();</span><br><span class="line">        <span class="type">Phone3</span> <span class="variable">phone1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone3</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sendSms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone1.call();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone3</span> &#123;</span><br><span class="line">    <span class="comment">//static静态方法</span></span><br><span class="line">    <span class="comment">//类一加载就有了，锁的是class</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sendSms</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sendSms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><p>new this 具体的一个手机</p><p>static class为唯一的一个模板</p><h2 id="6、集合类不安全"><a href="#6、集合类不安全" class="headerlink" title="6、集合类不安全"></a>6、集合类不安全</h2><blockquote><p>List不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 并发下ArrayList不安全</span></span><br><span class="line"><span class="comment">         * 解决方法：</span></span><br><span class="line"><span class="comment">         *  1.List&lt;String&gt; list = new Vector&lt;&gt;();</span></span><br><span class="line"><span class="comment">         *  2.List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span></span><br><span class="line"><span class="comment">         *  3.List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//CopyOnWrite 写入是复制， cow 计算机程序设计领域的一种优化策略</span></span><br><span class="line">        <span class="comment">//多个线程调用的时候，list，读取的时候，固定的，写入（覆盖）</span></span><br><span class="line">        <span class="comment">//在写入的时候避免覆盖，造成数据问题</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">               list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">               System.out.println(list);</span><br><span class="line">           &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Set不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/30 15:11</span></span><br><span class="line"><span class="comment"> * Exception in thread &quot;1&quot; java.util.ConcurrentModificationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        Set&lt;String&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span></span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hashset底层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add set本质就是map key是无法重复的</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">//不变的常量</span></span><br></pre></td></tr></table></figure><blockquote><p>HashMap不安全</p></blockquote><h2 id="7、Callable（简单）"><a href="#7、Callable（简单）" class="headerlink" title="7、Callable（简单）"></a>7、Callable（简单）</h2><p>1、可以有返回值</p><p>2、可以抛出异常</p><p>3、方法不同,run()&#x2F;call();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>().start();</span><br><span class="line"></span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="comment">//适配器</span></span><br><span class="line">        <span class="type">FutureTask</span> <span class="variable">futureTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FutureTask</span>(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Callable的返回值</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">o</span> <span class="operator">=</span> (Integer) futureTask.get();</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、常用的辅助类"><a href="#8、常用的辅助类" class="headerlink" title="8、常用的辅助类"></a>8、常用的辅助类</h2><h3 id="8-1、CountDownLatch"><a href="#8-1、CountDownLatch" class="headerlink" title="8.1、CountDownLatch"></a>8.1、CountDownLatch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatcheDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">//总数6</span></span><br><span class="line">        <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;go out&quot;</span>);</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//等待计数器归零</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;close Door&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>countDownLatch.countDown()</code>&#x2F;&#x2F;数量-1</p><p><code>countDownLatch.await()</code>&#x2F;&#x2F;等待计数器归零，然后在向下执行</p><p>每次有线程调用<code>countDownLatch.countDown()</code>减一，等归零之后会唤醒await()</p><h3 id="8-2、CycliBarrier"><a href="#8-2、CycliBarrier" class="headerlink" title="8.2、CycliBarrier"></a>8.2、CycliBarrier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 集齐7个龙珠召唤神龙</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//召唤龙珠的线程</span></span><br><span class="line">        <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>,() -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;召唤神龙成功&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;收集&quot;</span> + temp + <span class="string">&quot;龙珠&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//等待</span></span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (BrokenBarrierException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3、Semaphore"><a href="#8-3、Semaphore" class="headerlink" title="8.3、Semaphore"></a>8.3、Semaphore</h3><p><strong>Semaphore:</strong> 信号量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">                <span class="comment">//acquire 得到</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抢到车位&quot;</span>);</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;离开车位&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//release 释放</span></span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>semaphore.acquire()</code>获得，假设如果已经满了，等待，等待被释放为止</p><p><code>semaphore.release()</code>释放，会将当前的信号量释放+1，然后唤醒等待的线程</p><h2 id="9、读写锁"><a href="#9、读写锁" class="headerlink" title="9、读写锁"></a>9、读写锁</h2><p><strong>ReadWriteLock</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/30 16:01</span></span><br><span class="line"><span class="comment"> * ReadWriteLock</span></span><br><span class="line"><span class="comment"> * 读-读，可以共存</span></span><br><span class="line"><span class="comment"> * 读-写，不能共存</span></span><br><span class="line"><span class="comment"> * 写-写，不能共存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyCacheLock</span> <span class="variable">myCache</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCacheLock</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">                myCache.put(temp+<span class="string">&quot;&quot;</span>,temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">                myCache.get(temp+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCache</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存，写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">        map.put(key,value);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取，读</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCacheLock</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    <span class="comment">//读写锁，更加细粒度的操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存，写入的时候，只希望同时只有一个线程写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key,Object value)</span>&#123;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入&quot;</span> + key);</span><br><span class="line">            map.put(key,value);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;写入ok&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取，读，所有人都可以读</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(String key)</span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取&quot;</span> + key);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;读取ok&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、阻塞队列"><a href="#10、阻塞队列" class="headerlink" title="10、阻塞队列"></a>10、阻塞队列</h2><p><strong>什么情况下会使用阻塞队列：</strong>多线程并发处理，线程池</p><p><strong>使用队列</strong></p><p>添加、移除</p><h3 id="四组API"><a href="#四组API" class="headerlink" title="四组API"></a>四组API</h3><table><thead><tr><th>方式</th><th>抛出异常</th><th>有返回值，不抛异常</th><th>阻塞等待</th><th>超时等待</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer</td></tr><tr><td>移除</td><td>remove</td><td>poll</td><td>take</td><td>poll</td></tr><tr><td>判断队列首</td><td>element</td><td>peek</td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 抛出异常</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//队列的大小</span></span><br><span class="line">      <span class="type">ArrayBlockingQueue</span> <span class="variable">arrayBlockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">      System.out.println(arrayBlockingQueue.add(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">      System.out.println(arrayBlockingQueue.add(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">      System.out.println(arrayBlockingQueue.add(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">      <span class="comment">//Exception in thread &quot;main&quot; java.lang.IllegalStateException: Queue full</span></span><br><span class="line">      <span class="comment">//System.out.println(arrayBlockingQueue.add(&quot;d&quot;));</span></span><br><span class="line">      System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">      System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">      System.out.println(arrayBlockingQueue.remove());</span><br><span class="line">      <span class="comment">//Exception in thread &quot;main&quot; java.util.NoSuchElementException</span></span><br><span class="line">      <span class="comment">//System.out.println(arrayBlockingQueue.remove());</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不抛异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="type">ArrayBlockingQueue</span> <span class="variable">blockingQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">       System.out.println(blockingQueue.offer(<span class="string">&quot;c&quot;</span>));</span><br><span class="line">       <span class="comment">//false</span></span><br><span class="line">       <span class="comment">//System.out.println(blockingQueue.offer(&quot;c&quot;));</span></span><br><span class="line"></span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       System.out.println(blockingQueue.poll());</span><br><span class="line">       <span class="comment">//null</span></span><br><span class="line">       <span class="comment">//System.out.println(blockingQueue.poll());</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 等待，阻塞（一直阻塞）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">      ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">      blockingQueue.put(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">      blockingQueue.put(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">      <span class="comment">//队列没有位置了，一直阻塞</span></span><br><span class="line">      <span class="comment">//blockingQueue.put(&quot;d&quot;);</span></span><br><span class="line"></span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">      System.out.println(blockingQueue.take());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待，阻塞（等待超时）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">    ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    blockingQueue.offer(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    blockingQueue.offer(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    blockingQueue.offer(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    blockingQueue.offer(<span class="string">&quot;d&quot;</span>,<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line"></span><br><span class="line">    blockingQueue.poll();</span><br><span class="line">    blockingQueue.poll();</span><br><span class="line">    blockingQueue.poll();</span><br><span class="line">    blockingQueue.poll(<span class="number">2</span>,TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SynchronousQueue同步队列</p></blockquote><p>没有容量，进去一个元素，必须等待取出来之后，才能再里面放一个元素</p><p>put 、take</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/30 19:38</span></span><br><span class="line"><span class="comment"> * 同步队列和其他的BlockingQueue不一样</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SynchronousQueueTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//同步队列</span></span><br><span class="line">        BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 1&quot;</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 2&quot;</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;put 3&quot;</span>);</span><br><span class="line">                queue.put(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + queue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + queue.take());</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + queue.take());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、线程池（重点）"><a href="#11、线程池（重点）" class="headerlink" title="11、线程池（重点）"></a>11、线程池（重点）</h2><p>线程池：三大方法、7大参数、4钟拒绝策略</p><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占用系统的资源！优化资源的使用！ &#x3D;》池化技术</p><p>线程池、连接池、内存池、对象池……</p><p>池化技术：事先准备好一些资源，有人要用，就来我这里拿，用完之后返还</p><p><strong>线程池的好处：</strong></p><p>1、降低资源的消耗</p><p>2、提高相应的速度</p><p>3、方便管理</p><p><strong>线程复用，可以控制最大并发数，管理线程</strong></p><blockquote><p>三大方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/30 19:54</span></span><br><span class="line"><span class="comment"> * Executors工具，3大方法</span></span><br><span class="line"><span class="comment"> * 使用了线程池，使用线程池来创建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//单个线程</span></span><br><span class="line">        <span class="comment">//ExecutorService pool =  Executors.newSingleThreadExecutor();</span></span><br><span class="line">        <span class="comment">//创建一个固定线程池的大小</span></span><br><span class="line">        <span class="comment">//ExecutorService pool = Executors.newFixedThreadPool(5);</span></span><br><span class="line">        <span class="comment">//可伸缩的，遇强则强，遇弱则弱</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                pool.execute(() -&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//线程池用完，程序结束，关闭线程池</span></span><br><span class="line">            pool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>7大参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码分析</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//本质：ThreadPoolExecutor</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,//核心线程池大小</span></span><br><span class="line"><span class="params">                              <span class="type">int</span> maximumPoolSize,//最大核心线程大小</span></span><br><span class="line"><span class="params">                              <span class="type">long</span> keepAliveTime,//超时了没有人调用就会释放</span></span><br><span class="line"><span class="params">                              TimeUnit unit,//超时单位</span></span><br><span class="line"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span><br><span class="line"><span class="params">                              ThreadFactory threadFactory,//线程工厂，创建线程的，一般不用动</span></span><br><span class="line"><span class="params">                              RejectedExecutionHandler handler)</span> &#123;<span class="comment">//拒绝策略</span></span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="built_in">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>手动创建线程池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//银行满了，还有人进来，不处理这个人，抛出异常</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//最大承载数，Dequeue + max</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                pool.execute(() -&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//线程池用完，程序结束，关闭线程池</span></span><br><span class="line">            pool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>四种拒绝策略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/31 10:26</span></span><br><span class="line"><span class="comment"> * 七大参数</span></span><br><span class="line"><span class="comment"> * 四大拒绝策略</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.AbortPolicy() 银行满了，还有人进来，不处理这个人，抛出异常</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.CallerRunsPolicy() 哪来的去哪里</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.DiscardPolicy() 队列满了，丢掉任务，不会抛出异常，</span></span><br><span class="line"><span class="comment"> * new ThreadPoolExecutor.DiscardOldestPolicy() 队列满了，尝试去和最早的竞争，也不会抛出异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//银行满了，还有人进来，不处理这个人，抛出异常</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="number">2</span>,</span><br><span class="line">                <span class="number">5</span>,</span><br><span class="line">                <span class="number">3</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//最大承载数，Dequeue + max</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                pool.execute(() -&gt;&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//线程池用完，程序结束，关闭线程池</span></span><br><span class="line">            pool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>了解：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最大线程池到底如何定义</span></span><br><span class="line"><span class="comment">//1.cup密集型，几核就是几，可以保持cup的效率最高</span></span><br><span class="line"><span class="comment">//2.IO密集型，判断你程序中十分耗IO的线程</span></span><br><span class="line"><span class="comment">//程序 15个大型任务，io十分占用资源</span></span><br></pre></td></tr></table></figure><h2 id="12、ForkJoin"><a href="#12、ForkJoin" class="headerlink" title="12、ForkJoin"></a>12、ForkJoin</h2><blockquote><p>什么是ForkJoin</p></blockquote><p>ForkJoin在jdk1.7，并行执行任务！提高效率，大数据量！</p><p>大数据：Map Reduce（把大任务拆分成小人物）</p><p>ForkJoin特点：工作窃取（一个线程执行完了，就会帮助未完成的线程去完成任务）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//6065</span></span><br><span class="line">        <span class="comment">//test1();</span></span><br><span class="line">        <span class="comment">//4223</span></span><br><span class="line">        <span class="comment">//test2();</span></span><br><span class="line">        <span class="comment">//229</span></span><br><span class="line">        test3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1L</span>; i &lt;= <span class="number">10_0000_0000L</span> ; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span> + sum + <span class="string">&quot; 时间：&quot;</span> + (end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">ForkJoinPool</span> <span class="variable">forkJoinPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();</span><br><span class="line">        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>);</span><br><span class="line">        <span class="comment">//提交任务</span></span><br><span class="line">        ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> submit.get();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span> + sum + <span class="string">&quot; 时间：&quot;</span> + (end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//stream并行流</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> LongStream.rangeClosed(<span class="number">0L</span>, <span class="number">10_0000_0000L</span>).parallel().reduce(<span class="number">0</span>,Long::sum);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span> + sum + <span class="string">&quot; 时间：&quot;</span> + (end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//forkjoin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinDemo</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long start;</span><br><span class="line">    <span class="keyword">private</span> Long end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 临界值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">temp</span>  <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ForkJoinDemo</span><span class="params">(Long start, Long end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>((end-start) &lt; temp)&#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Long</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">//中间值</span></span><br><span class="line">           <span class="type">long</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) /<span class="number">2</span>;</span><br><span class="line">           <span class="type">ForkJoinDemo</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(start,middle);</span><br><span class="line">           <span class="comment">//拆分任务，把任务压入线程队列</span></span><br><span class="line">           task1.fork();</span><br><span class="line">           <span class="type">ForkJoinDemo</span> <span class="variable">task2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinDemo</span>(middle+<span class="number">1</span>,end);</span><br><span class="line">           task2.fork();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> task1.join() + task2.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13、异步回调"><a href="#13、异步回调" class="headerlink" title="13、异步回调"></a>13、异步回调</h2><blockquote><p>Future设计的初衷：对将来的某个事件的结果进行建模</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//发起一个请求</span></span><br><span class="line">        <span class="comment">//没有返回值的runAsync异步回调</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">            try &#123;</span></span><br><span class="line"><span class="comment">                TimeUnit.SECONDS.sleep(2);</span></span><br><span class="line"><span class="comment">            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">                e.printStackTrace();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println(Thread.currentThread().getName() + &quot;runAsync&quot;);</span></span><br><span class="line"><span class="comment">        &#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(&quot;==============&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //获取阻塞执行结果</span></span><br><span class="line"><span class="comment">        completableFuture.get();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 有返回值的supplyAsync 异步回调</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(() -&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;supplyAsync&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        completableFuture.whenComplete((t,u) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;t = &quot;</span> + t);</span><br><span class="line">            System.out.println(<span class="string">&quot;u = &quot;</span> + u);</span><br><span class="line">        &#125;).exceptionally((e) -&gt;&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2333</span>;</span><br><span class="line">        &#125;).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、JMM"><a href="#14、JMM" class="headerlink" title="14、JMM"></a>14、JMM</h2><blockquote><p>什么是JMM</p></blockquote><p>JMM：Java内存模型，不存在的东西，概念！约定！</p><p><strong>关于JMM的一些同步的约定</strong></p><p>1、线程解锁前，必须把共享变量<strong>立刻</strong>刷回主存</p><p>2、线程加锁前，必须读取主存中的最新值到工作内存中</p><p>3、加锁和解锁是同一把锁</p><p>问题：程序不知道线程中的值已经被修改过来</p><h2 id="15、Volatile"><a href="#15、Volatile" class="headerlink" title="15、Volatile"></a>15、Volatile</h2><blockquote><p>Volatile的理解</p></blockquote><p>Volatile是Java虚拟机提供的<strong>轻量的同步机制</strong></p><blockquote><p>1、保证可见性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JMMDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不加volatile程序就会死循环，</span></span><br><span class="line"><span class="comment">     * 加了volatile可以保证可见性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (num == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、不保证原子性</p></blockquote><p>原子性：不可分割</p><p>线程A在执行任务的时候，不能被打扰，也不能被分割。要么同时成功，要么同时失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/31 15:37</span></span><br><span class="line"><span class="comment"> * 不保证原子性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//理论上是两万</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果不加lock和synchronize，怎么保证原子性</strong></p><p>使用源自类，解决原子性问题</p><blockquote><p>原子类为什么这么高级</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/31 15:37</span></span><br><span class="line"><span class="comment"> * 不保证原子性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">AtomicInteger</span> <span class="variable">num</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//num++;</span></span><br><span class="line">        num.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//理论上是两万</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">                    add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">2</span>)&#123;</span><br><span class="line">            Thread.<span class="keyword">yield</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3、禁止指令重排</p></blockquote><p>什么是指令重排：<strong>你写的程序，计算机并不是按照你写的那样去执行的</strong></p><p>源代码 —&gt; 编译器优化的重排 —&gt; 指令并行也能重排 —&gt; 内存系统也可能重排 —&gt; 执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;<span class="comment">//1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2</span>;<span class="comment">//2</span></span><br><span class="line">x = x +<span class="number">5</span>;<span class="comment">//3</span></span><br><span class="line">y = x * x;<span class="comment">//4</span></span><br><span class="line">我们所期望的: <span class="number">1234</span>  但是执行的时候可能是： <span class="number">2134</span>   <span class="number">1324</span></span><br></pre></td></tr></table></figure><p><strong>volatile可以避免指令重排</strong></p><p>内存屏障。CPU指令。作用：</p><p>1、保证特定的操作的执行顺序</p><p>2、可以保证某些变量的内存可见性（利用这些特性volatile实现了可见性）</p><h2 id="16、彻底玩转单例模式"><a href="#16、彻底玩转单例模式" class="headerlink" title="16、彻底玩转单例模式"></a>16、彻底玩转单例模式</h2><p>饿汉式  DCL懒汉式</p><blockquote><p>饿汉式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/31 15:59</span></span><br><span class="line"><span class="comment"> * 饿汉式单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可能会浪费空间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data1 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data2 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data3 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] data4 = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Hungry</span> <span class="variable">HUNGRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  HUNGRY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DCL懒汉式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyMan</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyMan</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不要去使用反射破坏&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread.currentThread().getName() = &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> LazyMan lazyMan;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyMan <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lazyMan == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyMan.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(lazyMan == <span class="literal">null</span>)&#123;</span><br><span class="line">                    lazyMan = <span class="keyword">new</span> <span class="title class_">LazyMan</span>();</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 1。分配内存空间</span></span><br><span class="line"><span class="comment">                     * 2.执行构造方法，初始化对象</span></span><br><span class="line"><span class="comment">                     * 3.把这个对象指向这个空间</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyMan;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多线程并发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; 10; i++) &#123;</span></span><br><span class="line"><span class="comment">//            new Thread(() -&gt;&#123;</span></span><br><span class="line"><span class="comment">//                LazyMan.getInstance();</span></span><br><span class="line"><span class="comment">//            &#125;).start();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射</span></span><br><span class="line"><span class="comment">//        LazyMan instance = LazyMan.getInstance();</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">flag</span> <span class="operator">=</span> LazyMan.class.getDeclaredField(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        flag.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="literal">null</span>);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance2</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line">        flag.set(instance2,<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">LazyMan</span> <span class="variable">instance3</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance3);</span><br><span class="line">        System.out.println(instance2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>静态内部类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Holder</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Holder <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.HOLDER;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Holder</span> <span class="variable">HOLDER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Holder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>enum类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: lyj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2022/7/31 16:22</span></span><br><span class="line"><span class="comment"> * enum是什么？ 本身也是一个class</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line"></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="comment">//NoSuchMethodException: com.lyj.demo01.singer.EnumSingle.&lt;init&gt;()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">enumSingle</span> <span class="operator">=</span> EnumSingle.INSTANCE;</span><br><span class="line">        Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">EnumSingle</span> <span class="variable">instance</span> <span class="operator">=</span> declaredConstructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(enumSingle);</span><br><span class="line">        System.out.println(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17、深入理解CAS"><a href="#17、深入理解CAS" class="headerlink" title="17、深入理解CAS"></a>17、深入理解CAS</h2><blockquote><p>什么是CAS</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 期望、更新</span></span><br><span class="line"><span class="comment">         * 如果我期望的值达到了，那么就更新，否则，就不更新 CAS是CPU的并发器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CAS：比较当前工作内存中的值和主内存的值，如果这个值是期望的，那么则执行操作！如果不是一直循环</p><p><strong>缺点：</strong></p><p>1、循环会耗时</p><p>2、一次性只能保证一个共享变量的原子性</p><p>3、ABA问题</p><blockquote><p>CAS: ABA问题（狸猫换太子）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">2020</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 期望、更新</span></span><br><span class="line"><span class="comment">         * 如果我期望的值达到了，那么就更新，否则，就不更新 CAS是CPU的并发器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//=======捣乱的线程=========</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">2021</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2021</span>, <span class="number">2020</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=======捣乱的线程=========</span></span><br><span class="line">        System.out.println(atomicInteger.compareAndSet(<span class="number">2020</span>, <span class="number">6666</span>));</span><br><span class="line">        System.out.println(atomicInteger.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18、原子引用"><a href="#18、原子引用" class="headerlink" title="18、原子引用"></a>18、原子引用</h2><p>带版本号的原子引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解决ABA问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CASDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//AtomicInteger atomicInteger = new AtomicInteger(2020);</span></span><br><span class="line">        <span class="comment">//如果泛型是包装类，注意引用问题</span></span><br><span class="line">        AtomicStampedReference&lt;Integer&gt; atomicInteger = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="comment">//获得版本号</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicInteger.getStamp();</span><br><span class="line">            System.out.println(<span class="string">&quot;a1=&quot;</span> + stamp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicInteger.compareAndSet(<span class="number">1</span>, <span class="number">2</span>, atomicInteger.getStamp(), atomicInteger.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;a2=&quot;</span> + atomicInteger.getStamp());</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicInteger.compareAndSet(<span class="number">2</span>, <span class="number">1</span>, atomicInteger.getStamp(), atomicInteger.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;a3=&quot;</span> + atomicInteger.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="comment">//获得版本号</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> atomicInteger.getStamp();</span><br><span class="line">            System.out.println(<span class="string">&quot;b1=&quot;</span> + stamp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(atomicInteger.compareAndSet(<span class="number">1</span>, <span class="number">6</span>, atomicInteger.getStamp(), atomicInteger.getStamp() + <span class="number">1</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;b2=&quot;</span> + atomicInteger.getStamp());</span><br><span class="line">        &#125;,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 期望、更新</span></span><br><span class="line"><span class="comment">         * 如果我期望的值达到了，那么就更新，否则，就不更新 CAS是CPU的并发器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//=======捣乱的线程=========</span></span><br><span class="line">       <span class="comment">/* System.out.println(atomicInteger.compareAndSet(2020, 2021));</span></span><br><span class="line"><span class="comment">        System.out.println(atomicInteger.get());</span></span><br><span class="line"><span class="comment">        System.out.println(atomicInteger.compareAndSet(2021, 2020));</span></span><br><span class="line"><span class="comment">        System.out.println(atomicInteger.get());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //=======捣乱的线程=========</span></span><br><span class="line"><span class="comment">        System.out.println(atomicInteger.compareAndSet(2020, 6666));</span></span><br><span class="line"><span class="comment">        System.out.println(atomicInteger.get());*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19、各种锁的理解"><a href="#19、各种锁的理解" class="headerlink" title="19、各种锁的理解"></a>19、各种锁的理解</h2><h3 id="19-1-公平锁、非公平锁"><a href="#19-1-公平锁、非公平锁" class="headerlink" title="19.1 公平锁、非公平锁"></a>19.1 公平锁、非公平锁</h3><p>公平锁：非常公平，不能插队</p><p>非公平锁：非常不公平，可以插队(默认都是非公平锁)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-2-可重入锁"><a href="#19-2-可重入锁" class="headerlink" title="19.2 可重入锁"></a>19.2 可重入锁</h3><p>可重入锁(递归锁)</p><blockquote><p>Synchronize</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;sms&quot;</span>);</span><br><span class="line">        call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>lock</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dmeo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone2</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone2</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            phone.sms();</span><br><span class="line">        &#125;,<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span>&#123;</span><br><span class="line">    <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sms</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//锁必须配对不然会死锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;sms&quot;</span>);</span><br><span class="line">            call();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;call&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-3-自旋锁"><a href="#19-3-自旋锁" class="headerlink" title="19.3 自旋锁"></a>19.3 自旋锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义自旋锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpinLockDemo</span> &#123;</span><br><span class="line">    AtomicReference&lt;Thread&gt; atomicReference = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;===&gt; myLock&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!atomicReference.compareAndSet(<span class="literal">null</span>,thread))&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myUnLock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;===&gt; myUnLock&quot;</span>);</span><br><span class="line"></span><br><span class="line">        atomicReference.compareAndSet(thread,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSpinLock</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"><span class="comment">//        ReentrantLock reentrantLock = new ReentrantLock();</span></span><br><span class="line"><span class="comment">//        reentrantLock.lock();</span></span><br><span class="line"><span class="comment">//        reentrantLock.unlock();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 底层使用的自旋锁CAS</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">SpinLockDemo</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpinLockDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            lock.myLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.myUnLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        lock.myUnLock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="19-4-死锁"><a href="#19-4-死锁" class="headerlink" title="19.4 死锁"></a>19.4 死锁</h3><p><strong>死锁测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockB;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String lockA,String lockB)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.lockA = lockA;</span><br><span class="line">        <span class="built_in">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;lock: &quot;</span> + lockA + <span class="string">&quot;get =&gt;&quot;</span> + lockB);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;lock: &quot;</span> + lockB + <span class="string">&quot;get =&gt;&quot;</span> + lockA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、使用<code>jps -l</code>定位进程号</p><p>2、使用<code>jstack</code> 进程号找到死锁</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/08/24/docker/"/>
      <url>/2023/08/24/docker/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker为什么出现？"><a href="#Docker为什么出现？" class="headerlink" title="Docker为什么出现？"></a>Docker为什么出现？</h3><p>一款产品：开发-上线 两套环境！应用环境！应用配置！</p><p>开发 ··· 运维。问题：我的电脑用运行！版本更新，导致服务不可用！对于运维来说，考研太大了</p><p>环境配置是十分麻烦，每一个机器都要部署环境(集群redis,es、Hadoop)！费时费力</p><p>发布一个项目(jar + Redis Mysql + jdk ES),项目能不能都带上环境安装打包</p><p>Docker给以上的问题，提出了解决方案</p><h3 id="Docker能做什么："><a href="#Docker能做什么：" class="headerlink" title="Docker能做什么："></a>Docker能做什么：</h3><p><strong>虚拟机技术缺点：</strong></p><ol><li>资源占用十分多</li><li>冗余步骤多</li><li>启动很慢</li></ol><blockquote><p>容器化技术</p></blockquote><p><code>容器化技术不是模拟一个完整的系统</code></p><p>比较docker和虚拟机技术的不同：</p><ul><li>传统虚拟机，虚拟处一条硬件，运行一个完整的操作系统，然后在这个系统上安装软件</li><li>容器内的应用直接运行在宿主机的内，容器没有自己的内核，也没有虚拟我们的硬件，所以轻便了</li><li>每一个容器是相互隔离的，每个容器内都有一个数据自己的文件系统，互不影响</li></ul><blockquote><p>DevOps（开发、运维）</p></blockquote><p><strong>应用更快速的交付和部署:</strong></p><p>传统：一堆帮助文档，安装程序</p><p>Docker:打包镜像发布测试，一键运行</p><p><strong>更便捷的升级和扩缩容:</strong></p><p>使用了Docker之后，我们部署应用就像搭积木一样！</p><p>项目打包为一个镜像，扩展服务器A!服务器B！</p><p><strong>更简单的系统运维:</strong></p><p>在容器化之后，我的开发，测试环境都是高度一致的</p><p><strong>更高效的计算机资源利用:</strong></p><p>Docker是内核级别的虚拟化，可以再一个物理机上运行很多的容器实例！服务器性能可以压榨到极致</p><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker基本组成"><a href="#Docker基本组成" class="headerlink" title="Docker基本组成"></a>Docker基本组成</h3><p><strong>镜像(image)：</strong></p><p>docker镜像就好比一个模板，可以通过这个模板来创建容器服务，tomcat镜像&#x3D;&#x3D;&gt;run&#x3D;&#x3D;&gt;tomcat容器(提供服务器)</p><p><strong>容器(container)：</strong></p><p>docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建。启动，停止，删除，基本命令！</p><p>目前可以把这个容器理解为就是一个简易的linux系统</p><p><strong>仓库(repository)：</strong></p><p>仓库就是存放镜像的地方</p><p>仓库分为公有和私有</p><p>Docker Hub（默认是国外的）</p><p>阿里云……都有容器服务器(配置镜像加速)</p><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><blockquote><p>环境准备</p></blockquote><p>1.需要会一点点linux的基础</p><p>2.CentOs7</p><p>3.连接服务器</p><blockquote><p>环境查看</p></blockquote><p>查看系统内核版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 系统内核是3.10以上</span></span><br><span class="line">[root@localhost /]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1160.el7.x86_64</span><br></pre></td></tr></table></figure><p>系统版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;7 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;7&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 7 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:7&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-7&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;7&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;7&quot;</span></span><br></pre></td></tr></table></figure><p>帮助文档</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#卸载旧的docker</span></span><br><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="comment">#需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="comment">#设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#阿里云的镜像</span></span><br><span class="line"> yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="comment">#安装docker相关的 docker-ce社区 ee企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment">#启动Dockers</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 查看docker版本</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment">#hello-world</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">2db29710123e: Pull complete </span><br><span class="line">Digest: sha256:80f31da1ac7b312ba29d65080fddf797dd76acfb870e677f390d5acba9741b17</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查看下载的hello-world镜像</span><br><span class="line">[root@localhost /]# docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    feb5d9fea6a5   7 months ago   13.3kB</span><br></pre></td></tr></table></figure><p>删除docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 2.删除资源</span></span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure><h3 id="Docker为什么比VM快"><a href="#Docker为什么比VM快" class="headerlink" title="Docker为什么比VM快"></a>Docker为什么比VM快</h3><p>1、Docker有着比虚拟机更少的抽象层</p><p>2、Docker利用的是宿主机的内核，vm需要是Guest OS</p><p>所以说，新建一个容器时，docker不需要虚拟机一样需要重新加载一个操作系统内核，避免引导。虚拟机是加载Guest OS，分钟级别的，而docker是利用宿主机的操作系统内核，省略了这个复杂的过程，秒级</p><h2 id="Dokcer的常用命令"><a href="#Dokcer的常用命令" class="headerlink" title="Dokcer的常用命令"></a>Dokcer的常用命令</h2><h3 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment">#显示dokcer的版本系统</span></span><br><span class="line">docker info <span class="comment">#显示dokcer的系统信息，包括镜像和容器的数量</span></span><br><span class="line">docker 命令 --<span class="built_in">help</span> <span class="comment">#万能命令</span></span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment">#查看所有的镜像</span></span><br><span class="line"><span class="comment">#解释</span></span><br><span class="line">REPOSITORY 镜像的仓库源</span><br><span class="line">TAG   镜像的标签</span><br><span class="line">IMAGE ID   镜像的<span class="built_in">id</span></span><br><span class="line">CREATED    镜像的创建时间</span><br><span class="line">SIZE       镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选项</span></span><br><span class="line">  -a, --all             <span class="comment"># 列出所有镜像</span></span><br><span class="line">  -q, --quiet           <span class="comment"># 只显示镜像id</span></span><br></pre></td></tr></table></figure><h4 id="docker-search镜像搜索"><a href="#docker-search镜像搜索" class="headerlink" title="docker search镜像搜索"></a>docker search镜像搜索</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lyj]<span class="comment"># docker search mysql</span></span><br><span class="line">NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                          MySQL is a widely used, open-source relation…   12562     [OK]       </span><br><span class="line">mariadb                        MariaDB Server is a high performing open sou…   4830      [OK]       </span><br><span class="line">percona                        Percona Server is a fork of the MySQL relati…   576       [OK]       </span><br><span class="line">phpmyadmin                     phpMyAdmin - A web interface <span class="keyword">for</span> MySQL and M…   536       [OK]       </span><br><span class="line">bitnami/mysql                  Bitnami MySQL Docker Image                      71                   [OK]</span><br><span class="line"><span class="comment"># 可选项，通过搜索来过滤</span></span><br><span class="line">--filter=STARS=3000</span><br><span class="line">[root@localhost lyj]<span class="comment"># docker search mysql --filter=STARS=3000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   12562     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4830      [OK] </span><br></pre></td></tr></table></figure><h4 id="docker-pull下载镜像"><a href="#docker-pull下载镜像" class="headerlink" title="docker pull下载镜像"></a>docker pull下载镜像</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#下载镜像docker pull 镜像名[:tag]</span><br><span class="line">[root@localhost lyj]# docker pull mysql</span><br><span class="line">Using default tag: latest</span><br></pre></td></tr></table></figure><h4 id="dokcer-rmi-删除镜像"><a href="#dokcer-rmi-删除镜像" class="headerlink" title="dokcer rmi 删除镜像"></a>dokcer rmi 删除镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全部删除</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker rmi -f $(docker images -aq)</span></span><br><span class="line"><span class="comment">#单个删除</span></span><br><span class="line">docker rmi -f 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p><strong>说明：有了镜像才可以创建容器，Linux，下载一个centos镜像来测试学习</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h4 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="comment"># 参数说明</span></span><br><span class="line">--name=“Name”容器名字， tomcat01,tomcat02,用来区分容器</span><br><span class="line">--d       后台方式运行</span><br><span class="line">--it      使用交互方式运行，进入容器查看内容</span><br><span class="line">--p       指定容器的端口 -p 8080:8080</span><br><span class="line">-p ip:主机端口：容器端口</span><br><span class="line">-p 主机端口：容器端口(常用)</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-p        随机指定端口</span><br><span class="line"><span class="comment"># 测试，启动并进入容器</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker run -it centos /bin/bash</span></span><br><span class="line">[root@a7546e01fc42 /]<span class="comment"># ls #查看容器内的centos，基础版本，很多命令都是不完善的</span></span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line"><span class="comment">#从容器中退回主机</span></span><br><span class="line">[root@a7546e01fc42 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h4 id="列出所有的运行中的容器"><a href="#列出所有的运行中的容器" class="headerlink" title="列出所有的运行中的容器"></a>列出所有的运行中的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker ps 命令</span></span><br><span class="line">-a  <span class="comment">#列出当前正在运行的容器+带出历史运行过的容器</span></span><br><span class="line">-n=? <span class="comment">#显示最近创建的容器</span></span><br><span class="line">-q   <span class="comment">#只显示容器的编号</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost lyj]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED             STATUS                          PORTS     NAMES</span><br><span class="line">a7546e01fc42   centos         <span class="string">&quot;/bin/bash&quot;</span>   3 minutes ago       Exited (0) About a minute ago             condescending_williams</span><br><span class="line">9913150f68cb   feb5d9fea6a5   <span class="string">&quot;/hello&quot;</span>      About an hour ago   Exited (0) About an hour ago              ecstatic_hodgkin</span><br></pre></td></tr></table></figure><h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> <span class="comment">#直接停止并退出容器</span></span><br><span class="line">Ctrl + P + Q <span class="comment">#容器不停止但退出</span></span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器<span class="built_in">id</span> <span class="comment">#删除指定内容，不能删除正在运行的容器，如果要强制删除 rm -f</span></span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -aq) <span class="comment">#删除所有内容</span></span><br><span class="line">docker ps -a -q|xargs docker <span class="built_in">rm</span> <span class="comment">#删除所有容器</span></span><br></pre></td></tr></table></figure><h4 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id #启动容器</span><br><span class="line">docker restart 容器id #重启容器</span><br><span class="line">docker stop 容器id #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id #强制停止当前容器</span><br></pre></td></tr></table></figure><h3 id="常用的其他命令"><a href="#常用的其他命令" class="headerlink" title="常用的其他命令"></a>常用的其他命令</h3><h4 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令 docker run -d 镜像名</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker run -d centos</span></span><br><span class="line">0f13a674e8d67ff74b2498339d3c21d3ff2f99b3993a4121af9fa86246be916d</span><br><span class="line">[root@localhost lyj]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="comment"># 常见的坑：docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止，容器容器后发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --<span class="built_in">tail</span> 容器，没有日志</span><br><span class="line"><span class="comment">#自己编写一段shell脚本</span></span><br><span class="line"><span class="string">&quot;while true;do echo lyj;slepp 1;done&quot;</span></span><br><span class="line"><span class="comment">#显示日志</span></span><br><span class="line">-tf           <span class="comment">#显示日志</span></span><br><span class="line">--<span class="built_in">tail</span> number <span class="comment">#显示日志条数</span></span><br><span class="line">docker logs -ft --<span class="built_in">tail</span> 10 24ac83cd18b4</span><br></pre></td></tr></table></figure><h4 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令 docker top 容器id</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker top 24ac83cd18b4</span></span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                67867               67847               0                   17:00               ?                   00:00:00            /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> lyj;<span class="built_in">sleep</span> 1;<span class="keyword">done</span></span><br><span class="line">root                68185               67867               0                   17:03               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/bin/sleep 1</span><br></pre></td></tr></table></figure><h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker inspect 24ac83cd18b4</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;24ac83cd18b425e9f503e5899842dd1603559c0443926a393e814b7259aeb427&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2022-05-13T09:00:28.314887816Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Path&quot;</span>: <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Args&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">            <span class="string">&quot;while true;do echo lyj;sleep 1;done&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;State&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Status&quot;</span>: <span class="string">&quot;running&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Running&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;Paused&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Restarting&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OOMKilled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Dead&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Pid&quot;</span>: 67867,</span><br><span class="line">            <span class="string">&quot;ExitCode&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;StartedAt&quot;</span>: <span class="string">&quot;2022-05-13T09:00:28.676332024Z&quot;</span>,</span><br><span class="line">            <span class="string">&quot;FinishedAt&quot;</span>: <span class="string">&quot;0001-01-01T00:00:00Z&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ResolvConfPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/24ac83cd18b425e9f503e5899842dd1603559c0443926a393e814b7259aeb427/resolv.conf&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostnamePath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/24ac83cd18b425e9f503e5899842dd1603559c0443926a393e814b7259aeb427/hostname&quot;</span>,</span><br><span class="line">        <span class="string">&quot;HostsPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/24ac83cd18b425e9f503e5899842dd1603559c0443926a393e814b7259aeb427/hosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LogPath&quot;</span>: <span class="string">&quot;/var/lib/docker/containers/24ac83cd18b425e9f503e5899842dd1603559c0443926a393e814b7259aeb427/24ac83cd18b425e9f503e5899842dd1603559c0443926a393e814b7259aeb427-json.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;/elastic_gagarin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;RestartCount&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;overlay2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Platform&quot;</span>: <span class="string">&quot;linux&quot;</span>,</span><br><span class="line">        <span class="string">&quot;MountLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ProcessLabel&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;AppArmorProfile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ExecIDs&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;HostConfig&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Binds&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;ContainerIDFile&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LogConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;json-file&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Config&quot;</span>: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;NetworkMode&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;PortBindings&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;RestartPolicy&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;no&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MaximumRetryCount&quot;</span>: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;AutoRemove&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;VolumeDriver&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;VolumesFrom&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CapDrop&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CgroupnsMode&quot;</span>: <span class="string">&quot;host&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Dns&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsOptions&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DnsSearch&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;ExtraHosts&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;GroupAdd&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;IpcMode&quot;</span>: <span class="string">&quot;private&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Cgroup&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomScoreAdj&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;PidMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Privileged&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PublishAllPorts&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;ReadonlyRootfs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;SecurityOpt&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;UTSMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;UsernsMode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ShmSize&quot;</span>: 67108864,</span><br><span class="line">            <span class="string">&quot;Runtime&quot;</span>: <span class="string">&quot;runc&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ConsoleSize&quot;</span>: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Isolation&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpuShares&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Memory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;NanoCpus&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CgroupParent&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;BlkioWeight&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;BlkioWeightDevice&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteBps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceReadIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;BlkioDeviceWriteIOps&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuPeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuQuota&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimePeriod&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuRealtimeRuntime&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpusetCpus&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;CpusetMems&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Devices&quot;</span>: [],</span><br><span class="line">            <span class="string">&quot;DeviceCgroupRules&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;DeviceRequests&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;KernelMemory&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;KernelMemoryTCP&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemoryReservation&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwap&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MemorySwappiness&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OomKillDisable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;PidsLimit&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Ulimits&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;CpuCount&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;CpuPercent&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumIOps&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IOMaximumBandwidth&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;MaskedPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/asound&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/acpi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/kcore&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/keys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/latency_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_list&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/timer_stats&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sched_debug&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/scsi&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/sys/firmware&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;ReadonlyPaths&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/proc/bus&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/fs&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/irq&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sys&quot;</span>,</span><br><span class="line">                <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;GraphDriver&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/5c73a261c173cec8db9c2dd48143a5b963b2cce23dda4eb01262802efc898c54-init/diff:/var/lib/docker/overlay2/993f875b14fb02906ce0a4cc96d2fd0bd51ac4c3137d23be448fb77fefd26c14/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/5c73a261c173cec8db9c2dd48143a5b963b2cce23dda4eb01262802efc898c54/merged&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/5c73a261c173cec8db9c2dd48143a5b963b2cce23dda4eb01262802efc898c54/diff&quot;</span>,</span><br><span class="line">                <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/5c73a261c173cec8db9c2dd48143a5b963b2cce23dda4eb01262802efc898c54/work&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Mounts&quot;</span>: [],</span><br><span class="line">        <span class="string">&quot;Config&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Hostname&quot;</span>: <span class="string">&quot;24ac83cd18b4&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Domainname&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;User&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStdout&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;AttachStderr&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Tty&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;OpenStdin&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;StdinOnce&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;Env&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Cmd&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;/bin/sh&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-c&quot;</span>,</span><br><span class="line">                <span class="string">&quot;while true;do echo lyj;sleep 1;done&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;Image&quot;</span>: <span class="string">&quot;centos&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Volumes&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;WorkingDir&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Entrypoint&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;OnBuild&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Labels&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;org.label-schema.build-date&quot;</span>: <span class="string">&quot;20210915&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.license&quot;</span>: <span class="string">&quot;GPLv2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.name&quot;</span>: <span class="string">&quot;CentOS Base Image&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.schema-version&quot;</span>: <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;org.label-schema.vendor&quot;</span>: <span class="string">&quot;CentOS&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;NetworkSettings&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Bridge&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SandboxID&quot;</span>: <span class="string">&quot;c3c2cb8267717831d8702df2cc45333b92f175b66461de902323aa9d61e94252&quot;</span>,</span><br><span class="line">            <span class="string">&quot;HairpinMode&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;LinkLocalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;Ports&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;SandboxKey&quot;</span>: <span class="string">&quot;/var/run/docker/netns/c3c2cb826771&quot;</span>,</span><br><span class="line">            <span class="string">&quot;SecondaryIPAddresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;SecondaryIPv6Addresses&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f73444ad58e812ca8039b7ccd3c683dbaa63873183a14c1a2d395136f6414d5b&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">            <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">            <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">            <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Networks&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;bridge&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;IPAMConfig&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Links&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;Aliases&quot;</span>: null,</span><br><span class="line">                    <span class="string">&quot;NetworkID&quot;</span>: <span class="string">&quot;b3b838684f4e337f0a1e6fb386dd7b7a6860ba5e5b34bf1b2d32fd1833a058b5&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;f73444ad58e812ca8039b7ccd3c683dbaa63873183a14c1a2d395136f6414d5b&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.17.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPAddress&quot;</span>: <span class="string">&quot;172.17.0.2&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;IPPrefixLen&quot;</span>: 16,</span><br><span class="line">                    <span class="string">&quot;IPv6Gateway&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6Address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;GlobalIPv6PrefixLen&quot;</span>: 0,</span><br><span class="line">                    <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:11:00:02&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;DriverOpts&quot;</span>: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="comment">#命令</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器<span class="built_in">id</span> bashShell</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker exec -it 24ac83cd18b4 /bin/bash</span></span><br><span class="line">[root@24ac83cd18b4 /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@24ac83cd18b4 /]<span class="comment"># ps -ef</span></span><br><span class="line">UID         PID   PPID  C STIME TTY          TIME CMD</span><br><span class="line">root          1      0  0 09:00 ?        00:00:06 /bin/sh -c <span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> <span class="built_in">echo</span> lyj;<span class="built_in">sleep</span> 1;<span class="keyword">done</span></span><br><span class="line">root       9470      0  0 11:39 pts/0    00:00:00 /bin/bash</span><br><span class="line">root       9501      1  0 11:39 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=<span class="built_in">sleep</span> /usr/binroot       9502   9470  0 11:39 pts/0    00:00:00 ps -ef</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">docker attach 容器<span class="built_in">id</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker attach  24ac83cd18b4</span></span><br><span class="line"><span class="comment">#正在执行当前的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#docker exec 进入容器后开启一个新的终端，可以在里面操作（常用）</span></span><br><span class="line"><span class="comment">#docker attach 进入容器正在执行的终端，不会启动新的进程</span></span><br></pre></td></tr></table></figure><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径  目的的主机路径</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line">[root@localhost home]<span class="comment"># docker attach e1c59c6358fd</span></span><br><span class="line">[root@e1c59c6358fd /]<span class="comment"># cd /home</span></span><br><span class="line">[root@e1c59c6358fd home]<span class="comment"># ls</span></span><br><span class="line">[root@e1c59c6358fd home]<span class="comment"># touch test.java</span></span><br><span class="line">[root@e1c59c6358fd home]<span class="comment"># ls</span></span><br><span class="line">test.java</span><br><span class="line">[root@e1c59c6358fd home]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@localhost home]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@localhost home]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">e1c59c6358fd   centos    <span class="string">&quot;/bin/bash&quot;</span>   2 minutes ago   Exited (0) 8 seconds ago             romantic_aryabhata</span><br><span class="line">[root@localhost home]<span class="comment"># docker cp e1c59c6358fd:/home/test.java /home</span></span><br><span class="line">[root@localhost home]<span class="comment"># ls</span></span><br><span class="line">lyj  lyj.java  test.java</span><br></pre></td></tr></table></figure><h3 id="docker练习"><a href="#docker练习" class="headerlink" title="docker练习"></a>docker练习</h3><blockquote><p>Docker  安装nginx</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.搜索镜像 search </span></span><br><span class="line"><span class="comment"># 在docker hub上搜索nginx</span></span><br><span class="line"><span class="comment"># 2.下载镜像 pull</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker pull nginx</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">a2abf6c4d29d: Pull complete </span><br><span class="line">a9edb18cadd1: Pull complete </span><br><span class="line">589b7251471a: Pull complete </span><br><span class="line">186b1aaa4aa6: Pull complete </span><br><span class="line">b4df32aa5a72: Pull complete </span><br><span class="line">a0bcbecc962e: Pull complete </span><br><span class="line">Digest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line">[root@localhost lyj]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    605c77e624dd   4 months ago   141MB</span><br><span class="line">centos       latest    5d0da3dc9764   8 months ago   231MB</span><br><span class="line"><span class="comment"># -d 后台运行 </span></span><br><span class="line"><span class="comment"># --name 给容器命令</span></span><br><span class="line"><span class="comment"># -p 宿主机端口，容器内部端口</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">65c821bada5be37eddada13eb537c095857535a5393d9d45dc8505798c80f259</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker exec -it nginx01 /bin/bash</span></span><br><span class="line">root@65c821bada5b:/<span class="comment"># whereis nginx</span></span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@65c821bada5b:/<span class="comment"># ls</span></span><br><span class="line">bin   dev                  docker-entrypoint.sh  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">boot  docker-entrypoint.d  etc                   lib   media  opt  root  sbin  sys  usr</span><br><span class="line">root@65c821bada5b:/<span class="comment"># cd /ect/nginx</span></span><br><span class="line">bash: <span class="built_in">cd</span>: /ect/nginx: No such file or directory</span><br><span class="line">root@65c821bada5b:/<span class="comment"># cd /etc/nginx</span></span><br><span class="line">root@65c821bada5b:/etc/nginx<span class="comment"># ls</span></span><br><span class="line">conf.d  fastcgi_params  mime.types  modules  nginx.conf  scgi_params  uwsgi_params</span><br></pre></td></tr></table></figure><blockquote><p>Docker布局tomcat</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方的使用</span></span><br><span class="line">docker run -it --<span class="built_in">rm</span> tomcat:9.0 <span class="comment">#用来测试，用完即删</span></span><br><span class="line"><span class="comment"># 我们之前的启动都是后台，停止容器之后，容器还是可以查到</span></span><br><span class="line"><span class="comment"># 下载在启动</span></span><br><span class="line">docker pull tomcat:9.0</span><br><span class="line"><span class="comment"># 启动运行</span></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="comment"># 测试访问没有问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker exec -it tomcat01 /bin/bash</span></span><br><span class="line"><span class="comment"># 发现问题：1.Linux命令太少了。 2.没有webapps. 阿里云镜像的原因，默认是最小的镜像，所以不必要的都剔除了</span></span><br><span class="line"><span class="comment"># 保证最小可运行镜像</span></span><br></pre></td></tr></table></figure><blockquote><p>Docker 部署es+kibana</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># es 暴露的端口很多！</span></span><br><span class="line"><span class="comment"># es 十分耗内存</span></span><br><span class="line"><span class="comment"># es 的数据一般需要放置到安全目录</span></span><br><span class="line"><span class="comment"># --net somenetwork ？ 网络设置</span></span><br><span class="line"></span><br><span class="line">docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动了 linux就卡住了 docker stats 查看cpu的状态</span></span><br><span class="line"><span class="comment"># es 是十分耗内存的</span></span><br><span class="line"><span class="comment"># 查看 docker stats</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭es,修改配置文件</span></span><br></pre></td></tr></table></figure><h4 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h4><ul><li>portainer(先用这个)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure><ul><li>Rancher(CI&#x2F;CD再用)</li></ul><h5 id="什么portainer"><a href="#什么portainer" class="headerlink" title="什么portainer?"></a>什么portainer?</h5><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><p>测试：访问外网</p><h2 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h2><h3 id="镜像是什么"><a href="#镜像是什么" class="headerlink" title="镜像是什么"></a>镜像是什么</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含了运行某个软件所需的所有的内容，包括代码、运行时、库、环境变量和配置文件。</p><h4 id="如何得到镜像"><a href="#如何得到镜像" class="headerlink" title="如何得到镜像"></a>如何得到镜像</h4><ul><li>从远程仓库下载</li><li>朋友拷贝给你</li><li>自己制作一个镜像DockerFile</li></ul><h3 id="Docker-镜像加载原理"><a href="#Docker-镜像加载原理" class="headerlink" title="Docker 镜像加载原理"></a>Docker 镜像加载原理</h3><blockquote><p>UnionFS（联合文件系统）</p></blockquote><p><strong>UnionFS（联合文件系统）：</strong>UnionFS文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改，作为一次提交一层层的叠加，同时可以将不同的目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual file system）。Union文件系统所是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p><strong>特性：</strong>一次同时加载多个文件系统，但才外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><blockquote><p>Docker镜像加载原理</p></blockquote><p>docker的镜像实际上由一层一层的文件系统组成，这个层级的文件系统UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动后会加载bootfs文件系统，在docker镜像的最底层是bootfs。这一层与我们典型的linux&#x2F;unix系统是一样的，包括boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs（root file system）,在bootfs智商，包含的就是典型的linux系统中的&#x2F;dev，&#x2F;proc，&#x2F;bin，&#x2F;etc等标准目录和文件。rootfs就是各种不同的操作系统发行版本，比如ubuntu，centos等等</p><p>平时我们安装虚拟机的CentOs都是好几个g，为什么docker这里才几百兆</p><p>对于一个精简的os，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就可以了。由此可见对于不同的linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版本可用公用bootfs。</p><h3 id="分层理解"><a href="#分层理解" class="headerlink" title="分层理解"></a>分层理解</h3><blockquote><p>分层的镜像</p></blockquote><p>为什么Docker镜像要采用这种分层的结构？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lyj]<span class="comment"># docker pull redis</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">a2abf6c4d29d: Already exists </span><br><span class="line">c7a4e4382001: Pull complete </span><br><span class="line">4044b9ba67c9: Pull complete </span><br><span class="line">c8388a79482f: Pull complete </span><br><span class="line">413c8bb60be2: Pull complete </span><br><span class="line">1abfd3011519: Pull complete </span><br><span class="line">Digest: sha256:db485f2e245b5b3329fdc7eff4eb00f913e09d8feb9ca720788059fdc2ed8339</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br></pre></td></tr></table></figure><p>最大的好处，莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需要在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层可以通过docker image inspect命令！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lyj]<span class="comment"># docker image inspect redis:latest</span></span><br></pre></td></tr></table></figure><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit 提交内容成为一个新的副本</span><br><span class="line"><span class="comment"># 命令和git类似</span></span><br><span class="line">docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器<span class="built_in">id</span> 目标镜像名：[TAG]</span><br></pre></td></tr></table></figure><p><strong>实践</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一个默认的tomcat</span></span><br><span class="line"><span class="comment"># 发现默认的tomcat是没有webapps应用的，原因在于官方的镜像webapps下的文件</span></span><br><span class="line"><span class="comment"># 将文件复制到webapps下</span></span><br><span class="line">p -r webapps.dist/* webapps</span><br><span class="line"><span class="comment"># 将修改过的容器通过commit操作提交为一个镜像，以后就可以使用修改过的镜像</span></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker commit -a=&quot;lyj&quot; -m=&quot;add webapps app content&quot; 79602de12c77 tomcat02:1.0</span></span><br><span class="line">sha256:60a918d863158b5ceb76c17bac25c9e974b2e0f6e107255c6538b100e80549c7</span><br><span class="line">[root@localhost lyj]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">tomcat02              1.0       60a918d86315   3 seconds ago   684MB</span><br><span class="line">nginx                 latest    605c77e624dd   4 months ago    141MB</span><br><span class="line">tomcat                9.0       b8e65a4d736d   4 months ago    680MB</span><br><span class="line">tomcat                latest    fb5657adc892   4 months ago    680MB</span><br><span class="line">redis                 latest    7614ae9453d1   4 months ago    113MB</span><br><span class="line">centos                latest    5d0da3dc9764   8 months ago    231MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   14 months ago   79.1MB</span><br><span class="line">elasticsearch         7.6.2     f29a1ee41030   2 years ago     791MB</span><br></pre></td></tr></table></figure><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><h3 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h3><p><strong>docker的理念：</strong>将应用和环境打包成一个镜像</p><p>容器之间由一个数据共享的技术，Docker容器中产生的数据，可以同步到本地</p><p>卷技术：将容器目录挂载到linux上面</p><h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><blockquote><p>直接使用命令挂载</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v 主机目录：容器目录</span><br><span class="line">[root@localhost home]<span class="comment"># docker run -it -v /home/test:/home centos /bin/bash</span></span><br><span class="line"><span class="comment">#查看是否挂载成功</span></span><br><span class="line">docker inspect 5ccb1ac870bf</span><br></pre></td></tr></table></figure><blockquote><p>实践：安装Mysql</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">[root@localhost /]<span class="comment"># docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器，挂载数据</span></span><br><span class="line"><span class="comment"># 安装启动mysql需要设置密码</span></span><br><span class="line"><span class="comment"># 官方：  docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动成功</span></span><br><span class="line"><span class="comment"># -v 数据卷挂载</span></span><br><span class="line"><span class="comment"># -d 后台启动</span></span><br><span class="line"><span class="comment"># -p 端口映射</span></span><br><span class="line"><span class="comment"># -e 环境配置</span></span><br><span class="line"><span class="comment"># --name 容器名字</span></span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动成功之后，连接docker的mysql</span></span><br><span class="line"><span class="comment"># 通过navicat连接数据库</span></span><br><span class="line"><span class="comment"># 创建一个数据库，测试文件是否挂载成功</span></span><br><span class="line">[root@localhost data]<span class="comment"># ls</span></span><br><span class="line">auto.cnf    client-cert.pem  ibdata1      ibtmp1              private_key.pem  server-key.pem</span><br><span class="line">ca-key.pem  client-key.pem   ib_logfile0  mysql               public_key.pem   sys</span><br><span class="line">ca.pem      ib_buffer_pool   ib_logfile1  performance_schema  server-cert.pem  <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 容器删除之后，挂载的数据卷依旧没有丢失文件</span></span><br></pre></td></tr></table></figure><h3 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名挂载</span></span><br><span class="line">-v 容器内路径</span><br><span class="line">-P 随机端口</span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"></span><br><span class="line">[root@localhost /]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     d13150</span><br><span class="line"></span><br><span class="line"><span class="comment"># 剧名挂载</span></span><br><span class="line">[root@localhost /]<span class="comment"># docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span></span><br><span class="line">e35b3cf78a4964b5bcc6836c43c5e60665316c310e04580ee2ab42dde5473eb7</span><br><span class="line">[root@localhost /]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     d131501ea9c086991b05e9e59fa9902d265b46a339c15202c59bc9c023f4ab2f</span><br><span class="line"><span class="built_in">local</span>     juming-nginx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看具名挂载的位置</span></span><br><span class="line">[root@localhost /]<span class="comment"># docker volume inspect juming-nginx</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2022-05-14T15:49:21+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/juming-nginx/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;juming-nginx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>所有docker容器内的卷，没有指定目录都是在<code>/var/lib/docker/volumes/xxx/_data</code></p><p>通过具名挂载可以方便的找到卷，大多数使用的都是<code>具名挂载</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如何确定是具名挂载合适匿名挂载，还是指定路径挂载</span></span><br><span class="line">-v 容器内路径  <span class="comment">#匿名挂载</span></span><br><span class="line">-v 卷名：容器内路径 <span class="comment">#具名挂载</span></span><br><span class="line">-v /宿主机路径：容器内路径 <span class="comment">#指定路径挂载</span></span><br></pre></td></tr></table></figure><p><strong>拓展：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 -v 容器内路径 ro rw 改变读写权限</span></span><br><span class="line"><span class="comment"># ro  readonly 只读</span></span><br><span class="line"><span class="comment"># rw  readwrite 可读可写</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">#ro 说明这个路径只能通过宿主机来操作，容器内部无法操作</span></span><br></pre></td></tr></table></figure><h3 id="初识DockerFile"><a href="#初识DockerFile" class="headerlink" title="初识DockerFile"></a>初识DockerFile</h3><p>DockerFile就是用来构建docker镜像的构建文件！</p><p>通过脚本生成镜像，镜像是一层一层的，脚本是一个个命令，每一个命令就是一层</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个dockerfile文件，名字可以随便</span></span><br><span class="line"><span class="comment"># 文件中的内容 指令(大写) 参数</span></span><br><span class="line">FORM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost docker-test-volume]<span class="comment"># docker build -f /home/docker-test-volume/dockerfile1 -t lyj/centos:1.0 .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 5d0da3dc9764</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> adf475a0af98</span><br><span class="line">Removing intermediate container adf475a0af98</span><br><span class="line"> ---&gt; 4dd2b9a5d3cc</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">&quot;----end----&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 3f617792852a</span><br><span class="line">Removing intermediate container 3f617792852a</span><br><span class="line"> ---&gt; 6b2f0b022f0d</span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 216f3f309b22</span><br><span class="line">Removing intermediate container 216f3f309b22</span><br><span class="line"> ---&gt; ac1b086b26d7</span><br><span class="line">Successfully built ac1b086b26d7</span><br><span class="line">Successfully tagged lyj/centos:1.0</span><br></pre></td></tr></table></figure><p><strong>启动自己的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ac1b086b26d7 /bin/bash</span><br></pre></td></tr></table></figure><p><strong>自己容器挂载的路径</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;c9e87917b6ac7b8b8e659dc3aa18454c67480f8b18328873c8eb4005126cc260&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/c9e87917b6ac7b8b8e659dc3aa18454c67480f8b18328873c8eb4005126cc260/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;6716d8d8d2108ef678bd3d68632ec45a1f8b1086a3e9cab08965c0b73edde3f4&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/var/lib/docker/volumes/6716d8d8d2108ef678bd3d68632ec45a1f8b1086a3e9cab08965c0b73edde3f4/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure><h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><p>多个容器同步数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动三个镜像，通过我们自己写的镜像去启动</span></span><br><span class="line"></span><br><span class="line">[root@localhost lyj]<span class="comment"># docker run -it --name docker01 lyj/centos:1.0</span></span><br><span class="line">[root@af22ef053837 /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib    lost+found  mnt  proc  run   srv  tmp  var       volume02</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr  volume01</span><br><span class="line">[root@af22ef053837 /]<span class="comment"># ls -l</span></span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 360 May 17 02:18 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 May 17 02:18 etc</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root   6 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x. 186 root root   0 May 17 02:18 proc</span><br><span class="line">dr-xr-x---.   2 root root 162 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x.  11 root root 163 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x.  13 root root   0 May 17 02:13 sys</span><br><span class="line">drwxrwxrwt.   7 root root 171 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x.  12 root root 144 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x.  20 root root 262 Sep 15  2021 var</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 17 02:18 volume01</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 17 02:18 volume02</span><br></pre></td></tr></table></figure><p>删除docker01的容器之后数据依然存在</p><blockquote><p>容器之间买配置信息的传递，数据卷容器的生命周期一致持续到没有容器使用为止</p></blockquote><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="DokerFile介绍"><a href="#DokerFile介绍" class="headerlink" title="DokerFile介绍"></a>DokerFile介绍</h3><p>dockerFile是用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像(Docker Hub、阿里云镜像仓库)</li></ol><p><code>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建镜像</code></p><h3 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h3><p><strong>基础知识：</strong></p><p>1、每个保留关键字(指令)都是必须大写字母</p><p>2、执行顺序是从上到下的</p><p>3、# 表示注释</p><p>4、每一个指令都会创建提交一个新的镜像层，并提交！</p><p>dockerFile是面向开发的，以后发布项目，做镜像，就需要编写dockerfile文件，这个文件很简单，dockerfil逐渐成为企业交付的标准，必须要掌握！</p><p>步骤：开发、部署、运维缺一不可</p><p>DockerFile：构建文件，定义了一切的步骤，源代码</p><p>DockerImages：通过dockerfile构建生成的镜像，最终发布和运行的产品</p><p>Docker容器：容器就是镜像运行起来提供服务器</p><h3 id="指令："><a href="#指令：" class="headerlink" title="指令："></a>指令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM<span class="comment"># 基础镜像，一切从这里开始构建</span></span><br><span class="line">MAINTAINER<span class="comment"># 镜像是谁写的，姓名+邮箱</span></span><br><span class="line">RUN<span class="comment"># 镜像构建的时候需要运行的命令</span></span><br><span class="line">ADD <span class="comment"># 步骤，tomcat镜像，这个tomcat压缩包！添加内容</span></span><br><span class="line">WORKDIR <span class="comment"># 镜像的工作目录</span></span><br><span class="line">VOLUEM <span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOSE <span class="comment"># 保留端口配置</span></span><br><span class="line">CMD<span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代</span></span><br><span class="line">ENTRYPOINT  <span class="comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span></span><br><span class="line">ONBUILD <span class="comment"># 当构建一个被继承DockerFile这个时候就会运行ONBUILD的指令</span></span><br><span class="line">COPY <span class="comment"># 类似ADD,将我们的文件拷贝到镜像中</span></span><br><span class="line">ENV <span class="comment"># 构建的时候设置环境变量！</span></span><br></pre></td></tr></table></figure><blockquote><p>创建一个属于自己的centos</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编写dockerfile的文件</span></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># vim mydockerfile-centos</span></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># cat mydockerfile-centos </span></span><br><span class="line">FROM centos</span><br><span class="line">MAINTANER lyj-2063074967@qq.com</span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">RUN  yum -y install vim</span><br><span class="line">RUN  yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;---end---&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建镜像</span></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker build -f mydockerfile-centos -t mycentos:0.1 .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试运行</span></span><br><span class="line">docker run -it mycentos:0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史变更</span></span><br><span class="line">ot@localhost dockerfile]<span class="comment"># docker history 5d0da3dc9764</span></span><br><span class="line">IMAGE          CREATED        CREATED BY                                      SIZE      COMMENT</span><br><span class="line">5d0da3dc9764   8 months ago   /bin/sh -c <span class="comment">#(nop)  CMD [&quot;/bin/bash&quot;]            0B        </span></span><br><span class="line">&lt;missing&gt;      8 months ago   /bin/sh -c <span class="comment">#(nop)  LABEL org.label-schema.sc…   0B        </span></span><br><span class="line">&lt;missing&gt;      8 months ago   /bin/sh -c <span class="comment">#(nop) ADD file:805cb5e15fb6e0bb0…   231MB   </span></span><br></pre></td></tr></table></figure><blockquote><p>CMD 和 ENTRYPOINT 区别</p></blockquote><p>测试cmd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dockerfile]<span class="comment"># vim dockerfile-cmd-test</span></span><br><span class="line"><span class="comment"># 脚本</span></span><br><span class="line">FROM centos:7</span><br><span class="line">CMD [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker build -f dockerfile-cmd-test  -t cmdtest .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令生效</span></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker run 744c3d93e4a3</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">anaconda-post.log</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"></span><br><span class="line"><span class="comment"># 想追加命令 il, ls -al</span></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker run 744c3d93e4a3 -l</span></span><br><span class="line">docker: Error response from daemon: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: <span class="built_in">exec</span>: <span class="string">&quot;-l&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span>: unknown.</span><br><span class="line"></span><br><span class="line"><span class="comment"># cmd情况下-l 替代了ls -a</span></span><br></pre></td></tr></table></figure><p>测试ENTRYPOINT</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dockerfile]<span class="comment"># vim dockerfile-cmd-entryponit</span></span><br><span class="line"><span class="comment"># 脚本</span></span><br><span class="line">FROM centos:7</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"></span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker build -f dockerfile-cmd-entryponit -t entrypoint-test .</span></span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos:7</span><br><span class="line"> ---&gt; eeb6ee3f44bd</span><br><span class="line">Step 2/2 : ENTRYPOINT [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 84619c168165</span><br><span class="line">Removing intermediate container 84619c168165</span><br><span class="line"> ---&gt; a0a8da7d7890</span><br><span class="line">Successfully built a0a8da7d7890</span><br><span class="line">Successfully tagged entrypoint-test:latest</span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker run a0a8da7d7890</span></span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">anaconda-post.log</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line">[root@localhost dockerfile]<span class="comment"># docker run a0a8da7d7890 -l</span></span><br><span class="line">total 12</span><br><span class="line">drwxr-xr-x.   1 root root     6 May 17 03:33 .</span><br><span class="line">drwxr-xr-x.   1 root root     6 May 17 03:33 ..</span><br><span class="line">-rwxr-xr-x.   1 root root     0 May 17 03:33 .dockerenv</span><br><span class="line">-rw-r--r--.   1 root root 12114 Nov 13  2020 anaconda-post.log</span><br><span class="line">lrwxrwxrwx.   1 root root     7 Nov 13  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root   340 May 17 03:33 dev</span><br><span class="line">drwxr-xr-x.   1 root root    66 May 17 03:33 etc</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 home</span><br><span class="line">lrwxrwxrwx.   1 root root     7 Nov 13  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root     9 Nov 13  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 media</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 mnt</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 opt</span><br><span class="line">dr-xr-xr-x. 187 root root     0 May 17 03:33 proc</span><br><span class="line">dr-xr-x---.   2 root root   114 Nov 13  2020 root</span><br><span class="line">drwxr-xr-x.  11 root root   148 Nov 13  2020 run</span><br><span class="line">lrwxrwxrwx.   1 root root     8 Nov 13  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 srv</span><br><span class="line">dr-xr-xr-x.  13 root root     0 May 17 02:13 sys</span><br><span class="line">drwxrwxrwt.   7 root root   132 Nov 13  2020 tmp</span><br><span class="line">drwxr-xr-x.  13 root root   155 Nov 13  2020 usr</span><br><span class="line">drwxr-xr-x.  18 root root   238 Nov 13  2020 var</span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分相似，我们需要了解它们的区别，我的最好的学习就是对比测试</p><h3 id="实践：Tomcat镜像"><a href="#实践：Tomcat镜像" class="headerlink" title="实践：Tomcat镜像"></a>实践：Tomcat镜像</h3><p>1、准备镜像文件tomcat压缩包，jdk的压缩包</p><p>2、准备dockerfile文件，官方命令<code>Dockerfile</code>,build时会自动寻找这个文件，就不需要-f指定了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7</span><br><span class="line">MAINTAINET lyj-2063074967@qq.com</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u181-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.63.tar.gz /usr/lcoal/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_181</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.63</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.63</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.63/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/local/apache-tomcat-9.0.63/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><p>3、构建镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t diytomcat .</span></span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><h3 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h3><p>清空所有环境（镜像和容器）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker 如何处理容器网络访问</span></span><br><span class="line"></span><br><span class="line">[root@localhost /]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的内部网络地址 ip addr</span></span><br><span class="line"><span class="comment"># linux可以Ping 容器内部</span></span><br></pre></td></tr></table></figure><blockquote><p>原理</p></blockquote><p>1、每启动一个docker容器，docker就会给docker容器分配一个ip,只要安装了docker，就会有一个网卡docker0桥接模式，使用的技术是evth-pair技术</p><p>2、在启动一个容器又多了一个网卡</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># ip addr</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 00:0c:29:32:a0:bc brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.108.110/24 brd 192.168.108.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::32c9:7680:6e1:ea04/64 scope <span class="built_in">link</span> noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 52:54:00:c7:4f:55 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    <span class="built_in">link</span>/ether 52:54:00:c7:4f:55 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: br-11e4c4d39e6c: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:20:e8:3d:98 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-11e4c4d39e6c</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    <span class="built_in">link</span>/ether 02:42:cc:<span class="built_in">cd</span>:5d:3d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:ccff:fecd:5d3d/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">8: vethbd6aa9d@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    <span class="built_in">link</span>/ether ba:cc:e4:b3:69:1e brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::b8cc:e4ff:feb3:691e/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">10: veth9702194@if9: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    <span class="built_in">link</span>/ether 96:99:e6:6c:aa:b6 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class="line">    inet6 fe80::9499:e6ff:fe6c:aab6/64 scope <span class="built_in">link</span> </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>容器带来的网卡，都是一对的，evth-pair就是一对虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连，正因为这个特性，evth-pari充当一个桥接，连接各种虚拟网络设备的，Docker容器之间的连接，都是使用evth-paur技术</p><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -P  --name tomcat03 --<span class="built_in">link</span> tomcat02 tomcat</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]<span class="comment"># docker exec -it tomcat02 cat /etc/hosts</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1     localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0 ip6-localnet</span><br><span class="line">ff00::0 ip6-mcastprefix</span><br><span class="line">ff02::1 ip6-allnodes</span><br><span class="line">ff02::2 ip6-allrouters</span><br><span class="line">172.17.0.3      555cc43e71d6</span><br></pre></td></tr></table></figure><p>link的本质：就是在hosts配置增加了171.17.0.3 容器id</p><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><blockquote><p>查看所有docker 网络</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker network ls</span><br><span class="line">NETWORK ID     NAME          DRIVER    SCOPE</span><br><span class="line">835678176bfb   bridge        bridge    local</span><br><span class="line">33bd4092d423   host          host      local</span><br><span class="line">c67b96605b65   none          null      local</span><br><span class="line">11e4c4d39e6c   somenetwork   bridge    local</span><br></pre></td></tr></table></figure><h4 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h4><p>bridge：桥接docker（默认）自己创建网络也是用bridge模式</p><p>none：不配置网络</p><p>host：和宿主机共享网络</p><p>container：容器网络联通（用的少，局限很大）</p><p><strong>测试</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接启动的命令， --net bridge,而这个就docker0</span></span><br><span class="line">docker run -d -P --name tomcat01</span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># docker0特点，默认，域名不用访问，--link可以打通连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义一个网络</span></span><br><span class="line"><span class="comment"># --diver 桥接模式</span></span><br><span class="line"><span class="comment"># --subnet 子网</span></span><br><span class="line"><span class="comment"># --gateway 网关</span></span><br><span class="line">[root@localhost /]<span class="comment"># docker network create --driver bridge  --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span></span><br><span class="line">dc5bf1caafaa16013e9f9f0654982ed97cd589713f5925ddbd2908c0ccb1351b</span><br><span class="line">[root@localhost /]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">835678176bfb   bridge    bridge    <span class="built_in">local</span></span><br><span class="line">33bd4092d423   host      host      <span class="built_in">local</span></span><br><span class="line">dc5bf1caafaa   mynet     bridge    <span class="built_in">local</span></span><br><span class="line">c67b96605b65   none      null      <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker run -d -P --name tomcat-net-01 --net mynet</span><br><span class="line">&quot;docker run&quot; requires at least 1 argument.</span><br><span class="line">See &#x27;docker run --help&#x27;.</span><br><span class="line"></span><br><span class="line">Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line"></span><br><span class="line">Run a command in a new container</span><br><span class="line">[root@localhost /]# docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line">a07c51438812bcfc529fd503c929866a6f77d30a7e8716c72f9548ffc5025877</span><br><span class="line">[root@localhost /]# docker run -d -P --name tomcat-net-02 --net mynet tomcat</span><br><span class="line">ecdda4c64e007c8c7ef24de2dd581cbe967593c2fc730805f769c68930b82f6a</span><br><span class="line">[root@localhost /]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;dc5bf1caafaa16013e9f9f0654982ed97cd589713f5925ddbd2908c0ccb1351b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-05-18T11:06:01.965660686+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;a07c51438812bcfc529fd503c929866a6f77d30a7e8716c72f9548ffc5025877&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;de83ba706e481876e2973336408e5c071da47133ce309c7801bf8935bb391618&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ecdda4c64e007c8c7ef24de2dd581cbe967593c2fc730805f769c68930b82f6a&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;066c8632e98ebfb0d8cd3ebc3da9bc28df18749532ebd71fda9561e810e0a49b&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>自定义的网络docker已经帮我们维护好了对应的关系</p><p>好处：</p><p>redis-不同的集群使用不同的网络，保证了集群是安全和健康的</p><p>mysql-不同的集群使用不同的网络，保证了集群是安全和健康的</p><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试打通tomcat01到mynet</span></span><br><span class="line">[root@localhost /]# docker network connect mynet tomcat01</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连通之后就是tomcat01放到了mynet网络下</span></span><br><span class="line">[root@localhost /]# docker network inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;dc5bf1caafaa16013e9f9f0654982ed97cd589713f5925ddbd2908c0ccb1351b&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2022-05-18T11:06:01.965660686+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;3e25bc8a0e7586f3105c12ca550d5a28b0407ba5aa9bd362c4993422eb1729dd&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;5e6c258c064273d14450c2acfb98a34455524b11af4980378b62de1ae2249271&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;a07c51438812bcfc529fd503c929866a6f77d30a7e8716c72f9548ffc5025877&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;de83ba706e481876e2973336408e5c071da47133ce309c7801bf8935bb391618&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ecdda4c64e007c8c7ef24de2dd581cbe967593c2fc730805f769c68930b82f6a&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat-net-02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;066c8632e98ebfb0d8cd3ebc3da9bc28df18749532ebd71fda9561e810e0a49b&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除网络</span></span><br><span class="line">[root@localhost /]<span class="comment"># docker network rm somenetwork</span></span><br></pre></td></tr></table></figure><h3 id="部署redis集群"><a href="#部署redis集群" class="headerlink" title="部署redis集群"></a>部署redis集群</h3><p>创建redis网卡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# docker network create redis --subnet 172.38.0.0/16</span><br></pre></td></tr></table></figure><p>通过脚本创建六个reids配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379 </span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes </span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动容器</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf; \</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入一个容器</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span></span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: 9d90cb6cfe72a617664d5cc5ed83f654c2e9865b 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: ff448dc8dea2517b2c77b2558e04cbeda7fab184 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: fc808d7350a36679cdc645dbaa8ec18702ca9e99 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: a595255f05ffe1317a217143bc87ec97cc287432 172.38.0.14:6379</span><br><span class="line">   replicates fc808d7350a36679cdc645dbaa8ec18702ca9e99</span><br><span class="line">S: 88f5fca469eab471e64edebb7a75f4422c9ada08 172.38.0.15:6379</span><br><span class="line">   replicates 9d90cb6cfe72a617664d5cc5ed83f654c2e9865b</span><br><span class="line">S: 73f4b703c96d5c36e5480574bee473aef9914da8 172.38.0.16:6379</span><br><span class="line">   replicates ff448dc8dea2517b2c77b2558e04cbeda7fab184</span><br><span class="line">Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span></span><br><span class="line">Waiting for the cluster to join</span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span></span><br><span class="line">M: 9d90cb6cfe72a617664d5cc5ed83f654c2e9865b 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: ff448dc8dea2517b2c77b2558e04cbeda7fab184 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: a595255f05ffe1317a217143bc87ec97cc287432 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fc808d7350a36679cdc645dbaa8ec18702ca9e99</span><br><span class="line">S: 73f4b703c96d5c36e5480574bee473aef9914da8 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates ff448dc8dea2517b2c77b2558e04cbeda7fab184</span><br><span class="line">S: 88f5fca469eab471e64edebb7a75f4422c9ada08 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9d90cb6cfe72a617664d5cc5ed83f654c2e9865b</span><br><span class="line">M: fc808d7350a36679cdc645dbaa8ec18702ca9e99 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="keyword">for</span> open slots...</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span></span><br></pre></td></tr></table></figure><h3 id="SpringBoot项目打包Docker镜像"><a href="#SpringBoot项目打包Docker镜像" class="headerlink" title="SpringBoot项目打包Docker镜像"></a>SpringBoot项目打包Docker镜像</h3><p>1、构建springboot项目</p><p>2、打包应用</p><p>3、编写Dockerfile</p><p>4、构建镜像</p><p>5、发布运行</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>Docker</p><p>DockerFile build run 手动操作，单个容器！</p><p>微服务，100个微服务！依赖关系</p><p>Docker Compose 来轻松高效的管理容器，定义运行多个容器。</p><p>Compose是docker官方的开源项目，需要安装，</p><p><code>Dockerfile</code>让程序可以在任何地方运行，web服务、redis、MySQL、nginx…多个容器</p><p>Compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3.9&quot;  # optional since v1.27.0</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - .:/code</span><br><span class="line">      - logvolume01:/var/log</span><br><span class="line">    links:</span><br><span class="line">      - redis</span><br><span class="line">  redis:</span><br><span class="line">    image: redis</span><br><span class="line">volumes:</span><br><span class="line">  logvolume01: &#123;&#125;</span><br></pre></td></tr></table></figure><p>docker-compose -up 100个服务</p><p>Compose：重要的概念</p><ul><li>服务services，容器，应用。（web、redis、mysql）</li><li>项目project，一组关联的容器。博客，web,mysql</li></ul><h3 id="Compose-安装"><a href="#Compose-安装" class="headerlink" title="Compose 安装"></a>Compose 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/v2.5.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod +x docker-compose</span><br><span class="line"></span><br><span class="line">[root@localhost bin]# docker-compose version</span><br><span class="line">Docker Compose version v2.5.0</span><br></pre></td></tr></table></figure><h3 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h3><p>python应用，计数器，redis。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> mkdir composetest</span><br><span class="line"> cd composetest</span><br><span class="line"> </span><br><span class="line"> vim app.py</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">文件内容</span></span><br><span class="line"> import time</span><br><span class="line"></span><br><span class="line">import redis</span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">cache = redis.Redis(host=&#x27;redis&#x27;, port=6379)</span><br><span class="line"></span><br><span class="line">def get_hit_count():</span><br><span class="line">    retries = 5</span><br><span class="line">    while True:</span><br><span class="line">        try:</span><br><span class="line">            return cache.incr(&#x27;hits&#x27;)</span><br><span class="line">        except redis.exceptions.ConnectionError as exc:</span><br><span class="line">            if retries == 0:</span><br><span class="line">                raise exc</span><br><span class="line">            retries -= 1</span><br><span class="line">            time.sleep(0.5)</span><br><span class="line"></span><br><span class="line">@app.route(&#x27;/&#x27;)</span><br><span class="line">def hello():</span><br><span class="line">    count = get_hit_count()</span><br><span class="line">    return &#x27;Hello World! I have been seen &#123;&#125; times.\n&#x27;.format(count)</span><br><span class="line">    </span><br><span class="line">vim requirements.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容</span></span><br><span class="line">flask</span><br><span class="line">redis</span><br><span class="line"></span><br><span class="line">vim Dockerfile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">syntax=docker/dockerfile:1</span></span><br><span class="line">FROM python:3.7-alpine</span><br><span class="line">RUN echo -e http://mirrors.ustc.edu.cn/alpine/v3.12/main/ &gt; /etc/apk/repositories</span><br><span class="line">WORKDIR /code</span><br><span class="line">ENV FLASK_APP=app.py</span><br><span class="line">ENV FLASK_RUN_HOST=0.0.0.0</span><br><span class="line">RUN apk add --no-cache gcc musl-dev linux-headers</span><br><span class="line">COPY requirements.txt requirements.txt</span><br><span class="line">RUN pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --no-cache-dir -r requirements.txt</span><br><span class="line">EXPOSE 5000</span><br><span class="line">COPY . .</span><br><span class="line">CMD [&quot;flask&quot;, &quot;run&quot;]</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容</span></span><br><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:5000&quot;</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;redis:alpine&quot;</span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><h3 id="yaml-规则"><a href="#yaml-规则" class="headerlink" title="yaml 规则"></a>yaml 规则</h3><p>docker-compose.yaml核心</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3层</span></span><br><span class="line"></span><br><span class="line">version: &#x27;&#x27; #版本</span><br><span class="line">services: #服务</span><br><span class="line">服务1： web</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务配置</span></span><br><span class="line">images</span><br><span class="line">build</span><br><span class="line">network</span><br><span class="line">服务2： redis</span><br><span class="line">服务3： redis</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他配置 网络/卷、 全局规则</span></span><br></pre></td></tr></table></figure><h3 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h3><p>下载程序，安装数据库、配置……</p><p>compose应用。&#x3D;》一键启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mkdir my_wordpress</span><br><span class="line">cd my_wordpress</span><br><span class="line">vim docker-compose.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内容</span></span><br><span class="line">version: &quot;3.9&quot;</span><br><span class="line">    </span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    volumes:</span><br><span class="line">      - db_data:/var/lib/mysql</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: somewordpress</span><br><span class="line">      MYSQL_DATABASE: wordpress</span><br><span class="line">      MYSQL_USER: wordpress</span><br><span class="line">      MYSQL_PASSWORD: wordpress</span><br><span class="line">    </span><br><span class="line">  wordpress:</span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    image: wordpress:latest</span><br><span class="line">    volumes:</span><br><span class="line">      - wordpress_data:/var/www/html</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8000:80&quot;</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      WORDPRESS_DB_HOST: db</span><br><span class="line">      WORDPRESS_DB_USER: wordpress</span><br><span class="line">      WORDPRESS_DB_PASSWORD: wordpress</span><br><span class="line">      WORDPRESS_DB_NAME: wordpress</span><br><span class="line">volumes:</span><br><span class="line">  db_data: &#123;&#125;</span><br><span class="line">  wordpress_data: &#123;&#125;</span><br></pre></td></tr></table></figure><p>前台启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker -d</span><br><span class="line">docker-compose -d</span><br><span class="line">[+] Running 2/2</span><br><span class="line"> ⠿ Container my_wordpress-db-1         Started                                                         0.5s</span><br><span class="line"> ⠿ Container my_wordpress-wordpress-1  Started                                                         1.2s</span><br></pre></td></tr></table></figure><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">views</span> <span class="operator">=</span> redisTemplate.opsForValue().increment(<span class="string">&quot;views&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;hello lyj views:&quot;</span> + views;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.propertiees</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">redis</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dockerfile</span></span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-compose.yml</span></span><br><span class="line">version: &quot;3.9&quot;</span><br><span class="line">services:</span><br><span class="line">  lyjapp:</span><br><span class="line">    build: .</span><br><span class="line">    image: lyj</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">    ports:</span><br><span class="line">    - &quot;8080:8080&quot;</span><br><span class="line">  redis:</span><br><span class="line">    image: &quot;library/redis:alpine&quot;</span><br></pre></td></tr></table></figure><p>项目要重新打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库设计规范</title>
      <link href="/2023/08/24/shu-ju-ku-she-ji-gui-fan/"/>
      <url>/2023/08/24/shu-ju-ku-she-ji-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库设计规范"><a href="#数据库设计规范" class="headerlink" title="数据库设计规范"></a>数据库设计规范</h1><h2 id="数据库名称规范"><a href="#数据库名称规范" class="headerlink" title="数据库名称规范"></a>数据库名称规范</h2><ol><li><p>所有的数据库对象名称必须使用小写字母并用下划线分割（mysql数据库大小写敏感）<br> 例如: 不同的数据库名  DbName dbname 不同的表名 Table table taBLe</p></li><li><p>所有数据库对象名称禁止使用mysql保留关键字<br>例如 ：select id , username , from ,age from table_user 会造成mysql 歧义</p></li><li><p>数据库对象的命名要做到见名识义，并且最好不要超过32个字符<br> 例如：秒杀用户表  miaosha_userdb good!!<br> 用户账号表  user_account good!!</p></li><li><p>所有的临时表必须义tmp为前缀并且已日期为后缀，备份库备份表必须义bak为前缀并且已日期为后缀，大的可以到处sql</p></li><li><p>所有的数据存储的列名和列类型必须一致<br> custom_inf                     order_master<br> customer_id  int unsigned      customer_id  int unsigned<br> 必须一致否则会影响性能，一般这种列都是作为表的关联列，如果两个字段的数据类型不同，数据库则会进行隐式的数据类型<br> 转换降低性能，造成列上的索引失效！！</p></li></ol><h2 id="存储规范"><a href="#存储规范" class="headerlink" title="存储规范"></a>存储规范</h2><ol><li>所有的表必须使用Innodb存储引擎 支持事物行级锁，更好的恢复性，并发性能更好</li><li>大部分数据库表字符集要统一   （大部分使用UTF-8） 编码乱码 </li><li>所有的表和字段都要添加注释 数据字典的维护</li><li>尽量控制单表的数据量大小，建议控制在500万以内 当然500万并不是mysql的限制<br>过大可以通过历史数据归档，分库分表的手段来控制数据量的大小（订单表一类的比较重要）</li><li>尽量做到冷热数据分离，减少表的宽度  列最大4096列<br> 减少磁盘io,保证热数据的内存缓存命中率，控制列数量也可以更加有效的利用缓存，避免读入无用的冷数据<br> 经常使用的列放在一个表中</li><li>禁止在表中建立预留字段<br> 预留字段命名很难做到见识义，无法选择合适的类型，对预留字段修改会对表进行锁定</li></ol><h2 id="行为规范"><a href="#行为规范" class="headerlink" title="行为规范"></a>行为规范</h2><ol><li>禁止存储图片，文件等二进制文件，造成大量的io操作 （存在相应的文件服务器上）</li><li>禁止再线上进行数据库的压力测试</li><li>禁止从开发环境测试环境直连生产环境</li></ol><h2 id="索引设计规范"><a href="#索引设计规范" class="headerlink" title="索引设计规范"></a>索引设计规范</h2><ol><li><p>建议单表索引数量不超过5个 索引并不是越多越好过多索引降低效率，优化器过多索引选出最优解<br> innodb 是按照那个索引的顺序来组织表的呢   主键<br> 不使用更新频繁的列作为主键，不使用多列主键<br> 不使用uuid,md5,hash 字符串列作为主键  不能保证顺序增长</p></li><li><p>那些哪些列上建立索引？？？</p><ol><li>我们经常在select update delete语句的where从句的列建立索引</li><li>包含在order by , group by , distinct 中的字段</li><li>多表join的关联列</li></ol></li><li><p>如何选择索引的顺序？<br> 联合索引中  索引从左到右的顺序<br> 建立索引的目的 查询数据的时候可以根据索引来进行数据查找– 从而减少磁盘的随机io , 增加查询的性能，所以<br> 如果我们的索引能够过滤出更少的数据那么我们从磁盘读入的数据则越少</p><p> 1.区分度最高的列放在联合索引的最左侧 区分度–数据唯一值的数量&#x2F;总行数 区分度最大的就应该是主键了<br> 2.尽量字段长度小的列放在联合索引的最左侧<br> 3.使用最频繁的列放在最左侧 </p></li><li><p>尽量避免冗余和重复的索引   重复索引了： primary key(id) , index(id) , unique index(id)<br>  冗余： index(a,b,c) , index(a.b)</p></li><li><p>对于频繁使用的查询先优先考虑覆盖索引（包含了所有的查询字段的索引）</p></li><li><p>尽量使用外键 不建议使用外检约束，但是一定要在表与表之间的关联键上建立索引</p></li></ol><h2 id="数据库字段设计规范"><a href="#数据库字段设计规范" class="headerlink" title="数据库字段设计规范"></a>数据库字段设计规范</h2><ol><li>优先选择符合存储需要的最小的数据类型<br>1.将字符串转换成数字类型存储  INET_ATON(‘255.255.255.255’) &#x3D; 4294967295 字符串转ip<br>将字符串转换成数字类型存储  INET_NTOA(‘4294967295’) &#x3D; 255.255.255.255 ip 转字符串<br>2.对于非负数据采用无符号整形进行存储  signed int -2147483648 – 2147483647<br>   unsigned int -0 – 4294967295<br>3.VARCHAR(N)中的N代表的是字符数而不是字节数 使用UTF-8存储汉字varchar(255) &#x3D; 765个字节 存储255个汉字<br>4.过大的长度会消耗更多的内存 varchar是一个可变的长度 </li><li>避免使用text,blob数据类型 建议blob或者时text分离到单独的表中<br>避免使用enum数据类型</li><li>尽可能的所有列都定义为NOT NULL<br>索引null列需要额外的空间来保存，所以需要占用更多的空间<br>进行比较和计算的时候要对null值进行特别的处理</li><li>字符串存储日期型的数据不是正确的<br> 无法用日期函数来进行计算和比较<br> 用字符串存储日期要占用更多的空间</li><li>timestamp 和datatime 类型存储时间<br>timestamp 存储范围有限制 1970-01-01 00:00:01 ～2038-01-19 03:14:07<br>timestamp占用4字节和INT相同，但是INT可读性能高</li><li>财务相关的金额类数据，必须由decimal类型存储<br>decimal类型为精准的浮点数，在计算时不会丢失精度<br>占用空间由定义的宽度来决定<br>可用于存储比bigint更大的整数类型</li></ol><h2 id="数据库sql开发范式"><a href="#数据库sql开发范式" class="headerlink" title="数据库sql开发范式"></a>数据库sql开发范式</h2><ol><li><p>建议使用预编译语句对数据库进行操作</p></li><li><p>避免数据类型的隐式转换 不同表的相同列的数据类型不一致 会导致索引失效</p></li><li><p>重复利用已经存在的索引<br> 1.避免使用双%%的查询条件 如 a like ‘%1323%’<br> 2.一个sql只能利用到复合索引中的一列进行范围查询<br> 有 a,b,c列的联合索引，在查询条件中有a列的范围查询，则在b,c列上的索引将不会被用到，<br> 在定义联合索引时，如果a列要用到范围查找的话，就要把a列放到联合索引的右侧<br> 3.使用left join 或者not exists 来优化not in（偶尔也会导致索引失效） 操作 </p></li><li><p>程序链接不同数据库要使用不同的账号，禁止跨库连接为迁移和分库分表做预备</p></li><li><p>禁止select * 必须使用select &lt;字段列表&gt; （* 无法覆盖索引  减少表结构变更 对程序带来的影响）</p></li><li><p>insert 明确字段列表</p></li><li><p>禁止使用子查询，可以把子查询优化为join操作<br> 子查询结果集无法使用索引<br> 子查询会产生临时表操作，如果子查询数据量大则会更严重</p></li><li><p>避免使用过多的join 关联表<br>于Mysql来说，是存在关联缓存的，缓存的大小可以由join_buffer_size参数进行设置<br>在Mysql中，对于同一个SQL多关联（join）一个表，就会多分配一个关联缓存，如果在一个SQL中关联的表越多，<br>所占用的内存也就越大<br>                         如果程序中大量的使用了多表关联的操作，同时join_buffer_size设置的也不合理的情况下，就容易造成服务器内存溢出的情况，<br>就会影响到服务器数据库性能的稳定性<br>同时对于关联操作来说，会产生临时表操作，影响查询效率<br>Mysql最多允许关联61个表，建议不超过5个    </p></li><li><p>减少同数据库的交互次数 多个相同的操作合并在一起</p></li><li><p>对应同一列进行or判断时，使用in代替or</p></li></ol><pre><code>in 的值不要超过500个in 操作可以更有效的利用索引，or大多数情况下很少能利用到索引</code></pre><ol start="11"><li>禁止order by rand() 进行随机排序</li></ol><p>  会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序<br>  并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的CPU和IO及内存资源<br>  推荐在程序中获取一个随机值，然后从数据库中获取数据的方式       </p><ol start="12"><li><p>where 从句禁止对列进行函数转换和计算(导致无法使用相关列的索引)</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>（正确写法）</span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">miaosha_message </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">create_time <span class="operator">&gt;=</span> <span class="string">&#x27;20190101&#x27;</span> </span><br><span class="line"><span class="keyword">AND</span> create_time <span class="operator">&lt;</span> <span class="string">&#x27;20190102&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> （错误写法）</span><br><span class="line">  <span class="operator">*</span> </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">  miaosha_message </span><br><span class="line">  <span class="keyword">WHERE</span></span><br><span class="line">  <span class="type">date</span></span><br><span class="line">  (create_time) <span class="operator">=</span> <span class="string">&#x27;20190101&#x27;</span> </span><br></pre></td></tr></table></figure></li><li><p>不会有重复值时使用UNION ALL 而不是UNION<br>  UNION 会把两个结果集的所有数据放到临时表中后再进行去重操作<br>  UNION ALL 不会再对结果集进行去重操作</p></li><li><p>拆分大sql变为小sql<br>   大SQL:逻辑上比较复杂，需要占用大量CPU进行计算的SQL<br>   MySQL 一个SQL只能使用一个CPU进行计算<br>   SQL拆分后可以通过并行执行来提高处理效率</p></li></ol><h2 id="数据库操作行为规范"><a href="#数据库操作行为规范" class="headerlink" title="数据库操作行为规范"></a>数据库操作行为规范</h2><p>过大数据的（100万）批量写操作要分批多次操作<br>   1.大批量操作可能会导致严重的主从延迟<br>   2. binlog日志为row格式时会产生大量的日志<br>   大批量写操作会产生大量日志，特别是对于row格式二进制数据而言，由于在row格式中会记录每一行数据的修改，我们一次修改的数据越多，<br>   产生的日志量也就会越多，日志的传输和恢复所需要的时间也就越长，这也是造成主从延迟的一个原因<br>   3. 避免产生大事务操作<br>   大批量修改数据，一定是在一个事务中进行的，这就会造成表中大批量数据进行锁定，从而导致大量的阻塞，阻塞会对MySQL的性能产生非常大的影响<br>   特别是长时间的阻塞会占满所有数据库的可用连接，这会使生产环境中的其他应用无法连接到数据库，因此一定要注意大批量写操作要进行分批<br>   4.对于大表的修改使用pt-online-schema-change<br>    1.原理： 会在原表的结构上建造一个新表 复制数据<br>    2.避免延迟，修改时锁表<br>   5.禁止super权限滥用<br>   6.数据账号连接最小</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DataBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openSUSE配置</title>
      <link href="/2023/08/17/opensuse-pei-zhi/"/>
      <url>/2023/08/17/opensuse-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><h2 id="命令行配置软件源"><a href="#命令行配置软件源" class="headerlink" title="命令行配置软件源"></a>命令行配置软件源</h2><ol><li>禁用原有的软件源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper mr -da</span><br></pre></td></tr></table></figure></li><li>openSuSe Tumbleweed更换清华软件源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/tumbleweed/repo/oss/&#x27; mirror-oss</span><br><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/tumbleweed/repo/non-oss/&#x27; mirror-non-oss</span><br></pre></td></tr></table></figure>openSUSE Leap15.2或更高版本更换清华软件源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/distribution/leap/$releasever/repo/oss/&#x27; mirror-oss</span><br><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/distribution/leap/$releasever/repo/non-oss/&#x27; mirror-non-oss</span><br><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/update/leap/$releasever/oss/&#x27; mirror-update</span><br><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/update/leap/$releasever/non-oss/&#x27; mirror-update-non-oss</span><br></pre></td></tr></table></figure>Leap 15.3 用户还需添加 sle 和 backports 源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/update/leap/$releasever/sle/&#x27; mirror-sle-update</span><br><span class="line">sudo zypper ar -cfg &#x27;https://mirrors.tuna.tsinghua.edu.cn/opensuse/update/leap/$releasever/backports/&#x27; mirror-backports-update</span><br></pre></td></tr></table></figure><blockquote><p>Leap 15.3 注：若在安装时没有启用在线软件源，sle 源和 backports 源将在系统首次更新后引入，请确保系统在更新后仅启用了六个所需软件源。可使用 zypper lr 检查软件源状态，并使用 zypper mr -d 禁用多余的软件源</p></blockquote></li><li>添加中国软件源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper addrepo &#x27;https://download.opensuse.org/repositories/home:/opensuse_zh/openSUSE_Tumbleweed&#x27; openSUSE_zh</span><br></pre></td></tr></table></figure><blockquote><p>中国软件源包含WPS、网易云音乐等</p></blockquote></li><li>刷新软件源<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper ref</span><br></pre></td></tr></table></figure></li></ol><h2 id="常用zypper命令"><a href="#常用zypper命令" class="headerlink" title="常用zypper命令"></a>常用zypper命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看帮助</span></span><br><span class="line">zypper --help</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新本地软件包列表，请将 &lt;package&gt; 替换为相应的软件包包名</span></span><br><span class="line">zypper refresh</span><br><span class="line">zypper ref #简短版本</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装新软件包</span></span><br><span class="line">zypper install &lt;package&gt;</span><br><span class="line">zypper in &lt;package&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除一个软件包</span></span><br><span class="line">zypper remove &lt;package&gt;</span><br><span class="line">zypper rm &lt;package&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载程序，注意添加 --clean-deps 或者 -u，否则不会卸载依赖项！</span></span><br><span class="line">zypper remove --clean-deps &lt;package-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">升级一个软件包</span></span><br><span class="line">zypper update &lt;package&gt;</span><br><span class="line">zypper up &lt;package&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">升级全部软件包（Tumbleweed）</span></span><br><span class="line">zypper dist-upgrade</span><br><span class="line">zypper dup</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">搜索软件包</span></span><br><span class="line">zypper search &lt;keyword&gt;</span><br><span class="line">zypper se &lt;keyword&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找本地安装的程序</span></span><br><span class="line">zypper search --installed-only  &lt;package-name&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">列出全部的软件源</span></span><br><span class="line">zypper lr -P</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除软件的同时清楚软件依赖</span></span><br><span class="line">sudo zypper rm &lt;package&gt; --clean-deps # 将 &lt;package&gt; 替换为你要删除软件包的包名</span><br><span class="line">sudo zypper rm -u &lt;package&gt; #自动删除要卸载的软件包后不再需要的依赖项。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加rpm源</span></span><br><span class="line">rpm -ivh &lt;packname&gt;.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除rpm源</span></span><br><span class="line">rpm -e &lt;packname&gt;.rpm</span><br></pre></td></tr></table></figure><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><ol><li>openSUSE Tumbleweed更新系统的命令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper dup</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">opensuse leap更新系统的命令</span></span><br><span class="line">sudo zypper update</span><br></pre></td></tr></table></figure></li><li>查看哪些服务需要重启<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper ps -s</span><br></pre></td></tr></table></figure></li><li>重启电脑<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ol><h2 id="Flatpak"><a href="#Flatpak" class="headerlink" title="Flatpak"></a>Flatpak</h2><p>Flatpak 是一款用于 Linux 软件部署和软件包管理的工具。它为软件提供了一个沙箱环境，在这个环境中，用户可以在与系统其他部分隔离的情况下运行应用软件<br><strong>安装Flatpak</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in flatpak</span><br></pre></td></tr></table></figure><p><strong>添加 Flatpak 仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak remote-add --if-not-exists flathub [https://flathub.org/repo/flathub.flatpakrepo](https://flathub.org/repo/flathub.flatpakrepo)</span><br></pre></td></tr></table></figure><h3 id="Flatpak基本命令"><a href="#Flatpak基本命令" class="headerlink" title="Flatpak基本命令"></a>Flatpak基本命令</h3><p><strong>搜索软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak search [软件名称] #如： flatpak search atom</span><br></pre></td></tr></table></figure><p><strong>安装软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak install [软件名称] #如： flatpak install Atom</span><br></pre></td></tr></table></figure><p><strong>运行软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak run [应用 ID] #如： flatpak run io.atom.Atom</span><br></pre></td></tr></table></figure><p><strong>查看已安装软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak list</span><br></pre></td></tr></table></figure><p><strong>卸载软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak uninstall [软件名称]</span><br></pre></td></tr></table></figure><p><strong>将Flatpak软件安装到用户目录</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flatpak --user install flathub io.github.xiaoyifang.goldendict_ng</span><br></pre></td></tr></table></figure><p><strong>国产软件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WPS： com.wps.Office</span><br><span class="line">QQ： com.qq.QQ</span><br><span class="line">网易云音乐： com.netease.CloudMusic</span><br><span class="line">QQ Music： com.qq.QQmusic</span><br><span class="line">Icalingua++： io.github.Icalingua.Icalingua</span><br><span class="line">Wemeet： com.tencent.wemeet</span><br></pre></td></tr></table></figure><h2 id="AppImage"><a href="#AppImage" class="headerlink" title="AppImage"></a>AppImage</h2><p><code>AppImage</code>是一种在 Linux 系统中用于分发便携式软件而不需要超级用户权限来安装它们的格式。<br><code>AppImageLauncher</code>可以<code>AppImage</code>集成到应用程序启动器<br><strong>安装&amp;&amp;使用</strong></p><ol><li>从 <a href="https://github.com/TheAssassin/AppImageLauncher/releases/download/continuous/appimagelauncher-2.2.0-gha111.d9d4c73.x86_64.rpm">GitHub</a> 下载</li><li>在终端，移动到 AppImageLauncher 的下载目录，运行 <code>sudo zypper in appimagelauncher-2.2.0-gha111.d9d4c73.x86_64.rpm</code> 即可安装 AppImageLauncher。</li><li>打开应用程序启动器，打开 <code>AppImageLauncher Settings</code>，点击 <code>appImageLauncherd</code>，添加你常用于存放 <code>AppImage</code>文件的目录。默认的目录是 <code>~/Applications</code>。</li><li><strong>AppImageLauncher</strong> 会自动识别存放在指定目录的<code>AppImage</code>文件，然后将它们添加到应用程序启动器中。</li></ol><h2 id="使终端走代理"><a href="#使终端走代理" class="headerlink" title="使终端走代理"></a>使终端走代理</h2><p><strong>安装 proxychains-ng</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in proxychains-ng</span><br></pre></td></tr></table></figure><p><strong>编辑配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/proxychains.conf</span><br></pre></td></tr></table></figure><blockquote><p>proxychains.conf文件默认有一个socks4的配置，需要注释，不然会冲突</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将port更换成代理软件的端口</span></span><br><span class="line">http 127.0.0.1 port</span><br><span class="line">socks5 127.0.0.1 port</span><br></pre></td></tr></table></figure><p><strong>使用代理</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 &lt;你的命令行&gt;</span><br></pre></td></tr></table></figure><p>下载clash-nyanpasu<a href="https://github.com/keiko233/clash-nyanpasu/releases/download/v1.4.0/clash-nyanpasu_1.4.0_amd64.AppImage">clash-nyanpasu</a></p><h2 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用命令安装</span></span><br><span class="line">sudo zypper search font</span><br></pre></td></tr></table></figure><p><strong>直接下载Nerd Font字体</strong><br><a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/FiraCode.zip">FiraCode Nerd Font</a></p><p><strong>刷新字体</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><h2 id="Zsh"><a href="#Zsh" class="headerlink" title="Zsh"></a>Zsh</h2><ol><li>安装zsh<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in zsh</span><br></pre></td></tr></table></figure></li><li>下载oh-my-zsh<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br></pre></td></tr></table></figure></li><li>使用<code>oh-my-zsh</code>配置<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</span><br></pre></td></tr></table></figure></li><li>将<code>zsh</code>设为默认shell<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li><li>配置<code>~/.zshrc</code>文件，使得全局命令生效<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$HOME/bin:/usr/local/bin:/sbin:/usr/sbin:$PATH</span><br></pre></td></tr></table></figure></li><li>安装主题美化<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://hub.fastgit.org/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k</span><br></pre></td></tr></table></figure><blockquote><p>设置主题是提示<code>readonly</code>，使用以下命令<code>sudo chown lyj:lyj ~/.zshrc</code></p></blockquote></li><li>命令提示插件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></li><li>语法高亮插件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装插件</span></span><br><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></li><li>修改配置文件<code>~/.zshrc</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">     git</span><br><span class="line">     <span class="comment"># other plugins...</span></span><br><span class="line">     zsh-autosuggestions</span><br><span class="line">     zsh-syntax-highlighting</span><br><span class="line">     extract</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>zsh报<code>not found theme powerlevel10k</code>之类的信息，打开<code>~/.zshrc</code>文件，设置<code>ZSH_THEME=&quot;powerlevel10k/powerlevel10k&quot;</code></p></blockquote></li></ol><h2 id="Nvidia显卡驱动"><a href="#Nvidia显卡驱动" class="headerlink" title="Nvidia显卡驱动"></a>Nvidia显卡驱动</h2><p><strong>添加Nvidia软件源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Leap的显卡软件源</span></span><br><span class="line">sudo zypper addrepo --refresh &#x27;https://download.nvidia.com/opensuse/leap/$releasever&#x27; NVIDIA</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Tumbleweed的显卡软件源</span></span><br><span class="line">sudo zypper addrepo --refresh https://download.nvidia.com/opensuse/tumbleweed NVIDIA</span><br></pre></td></tr></table></figure><p><strong>获取架构信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure><p><strong>驱动版本:</strong></p><ul><li>GeForce 700 系列（Kepler）及更高版本，即 NVIDIA 于 2013 年 4 月后发售的显卡，安装<code>nvidia-video-G06</code></li><li> GeForce 600 系列，安装<code>x11-video-nvidiaG05</code></li><li>GTX4xx&#x2F;5xx Fermi 系列，安装<code>x11-video-nvidiaG04</code><br><strong>安装显卡驱动</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zypper install nvidia-video-G06</span><br></pre></td></tr></table></figure><strong>重启电脑<code>reboot</code></strong><br><strong>使用<code>nvidia-smi</code>命令</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zypper install nvidia-compute-utils-G06</span><br></pre></td></tr></table></figure><blockquote><p>对于同时用于核显和独享的电脑，显卡驱动安装之后重启电脑可能会黑屏，使用<code>Ctrl + Alt +F3</code>进入命令行界面</p></blockquote></li></ul><p><strong>切换显卡</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换独享</span></span><br><span class="line">sudo prime-select nvidia</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换核显</span></span><br><span class="line">sudo prime-select intel</span><br></pre></td></tr></table></figure><blockquote><p>电脑黑屏能看见鼠标使用<code>prime-select boot intel</code></p></blockquote><p><strong>注销电脑</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h1 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装GIT</span></span><br><span class="line">sudo zypper install git</span><br></pre></td></tr></table></figure><p><strong>Git配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置git代理,只对github.com使用代理，其他仓库不走代理：</span></span><br><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:2080</span><br><span class="line">git config --global https.https://github.com.proxy http://127.0.0.1:2080</span><br><span class="line"></span><br><span class="line">取消github代理：</span><br><span class="line">git config --global --unset http.https://github.com.proxy</span><br><span class="line">git config --global --unset https.https://github.com.proxy</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加个人信息：</span></span><br><span class="line">git config --global user.email &quot;2063074967@qq.com&quot; # 改成你的邮箱</span><br><span class="line">git config --global user.name &quot;lyj&quot; # 改成你的名字</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记住密码</span></span><br><span class="line">git config --global credential.helper store</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">GitHub生成秘钥</span></span><br><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;2063074967@qq.com&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将密钥添加到 SSH 代理</span></span><br><span class="line">eval &quot;$(ssh-agent -s)&quot;</span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="WPS"><a href="#WPS" class="headerlink" title="WPS"></a>WPS</h2><p><strong>卸载LibreOffice</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper remove libreoffice libreoffice-langpack-*</span><br></pre></td></tr></table></figure><p><strong>安装WPS，将windows中的字体拷贝到opensuse</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建字体目录</span></span><br><span class="line">sudo mkdir /usr/share/fonts/WindowsFonts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制字体</span></span><br><span class="line">sudo cp Fonts/* /usr/share/fonts/WindowsFonts</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋权</span></span><br><span class="line">sudo chmod 644 /usr/share/fonts/WindowsFonts/*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">刷新</span></span><br><span class="line">fc-cache -f</span><br></pre></td></tr></table></figure><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">导入密钥</span></span><br><span class="line">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加软件源</span></span><br><span class="line">sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">刷新软件源</span></span><br><span class="line">sudo zypper refresh</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装vscode</span></span><br><span class="line">sudo zypper install code</span><br></pre></td></tr></table></figure><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><p><strong>在<code>/etc/profile.d</code>目录下创建一个配置文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch configuration.sh</span><br></pre></td></tr></table></figure><p><strong>配置node环境变量,在<code>configuration.sh</code>下添加以下配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> nodejs enviroment</span></span><br><span class="line">NODEJS_HOME=/home/lyj/environment/node-v18.18.2-linux-x64</span><br><span class="line">PATH=$PATH:$NODEJS_HOME/bin</span><br><span class="line">export NODEJS_HOME PATH</span><br></pre></td></tr></table></figure><p><strong>更新配置</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source configuration.sh</span><br></pre></td></tr></table></figure><p><strong>切换淘宝镜像源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>下载java，配置环境变量<code>/etc/profile.d/configuration.sh</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> java environment</span></span><br><span class="line">JAVA_HOME=/home/lyj/environment/Java/jdk-17.0.9</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export JAVA_HOME CLASSPATH PATH</span><br></pre></td></tr></table></figure><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p><strong>下载Maven，配置环境变量<code>/etc/profile.d/configuration.sh</code></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">set</span> maven enviroment</span></span><br><span class="line">MAVEN_HOME=/home/lyj/environment/apache-maven-3.9.5</span><br><span class="line">PATH=$PATH:$MAVEN_HOME/bin</span><br><span class="line">export MAVEN_HOME PATH</span><br></pre></td></tr></table></figure><p><strong>设置阿里云镜像<code>/home/lyj/environment/apache-maven-3.9.5/conf/settings.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>设置本地仓库位置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/lyj/environment/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p><strong>下载MySQL软件源</strong><br><a href="https://repo.mysql.com//mysql80-community-release-sl15-8.noarch.rpm">mysql80-community-release-sl15-8.noarch.rpm</a><br><strong>添加MySQL软件源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in ./mysql80-community-release-sl15-8.noarch.rpm</span><br></pre></td></tr></table></figure><p><strong>开始安装MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in mysql-community-server</span><br></pre></td></tr></table></figure><p><strong>启动MySQL</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启MySQL服务</span></span><br><span class="line">systemctl start mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看MySQL服务状态</span></span><br><span class="line">systemctl status mysql</span><br></pre></td></tr></table></figure><p><strong>查看MySQL默认密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grep &#x27;temporary password&#x27; /var/log/mysql/mysqld.log</span><br></pre></td></tr></table></figure><p><strong>登录MySQL并修改密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登录</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置一个符合安全策略的密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Root_12root&#x27;;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整密码等级</span></span><br><span class="line">set global validate_password.policy=0;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整密码长度</span></span><br><span class="line">set global validate_password.length=1;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p><strong>导入MongoDB公钥</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rpm --import https://www.mongodb.org/static/pgp/server-7.0.asc</span><br></pre></td></tr></table></figure><p><strong>添加 MongoDB 的软件源</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper install zypper-migration-plugin</span><br><span class="line">sudo zypper ar -f https://repo.mongodb.org/zypper/suse/15/mongodb-org/4.4/x86_64/ mongodb</span><br></pre></td></tr></table></figure><p><strong>刷新软件源并安装软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper ref</span><br><span class="line">sudo zypper in mongodb-org</span><br></pre></td></tr></table></figure><p><strong>启动 MongoDB 服务</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mongod</span><br></pre></td></tr></table></figure><p><strong>设置开机自启</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mongod</span><br></pre></td></tr></table></figure><p><strong>修改MongoDB设置</strong></p><ol><li>编辑 MongoDB 配置文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/mongod.conf</span><br></pre></td></tr></table></figure></li><li>在配置文件中找到 bindIp 项，并将其修改为 0.0.0.0，这将使 MongoDB 监听所有可用 IP 地址</li><li>重启MongoDB服务<code>sudo systemctl restart mongod</code><br><strong>修改防火墙设置</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙对应的端口是否开启</span></span><br><span class="line">sudo firewall-cmd --query-port=27017/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开防火墙对应的端口</span></span><br><span class="line">sudo firewall-cmd --add-port=27017/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙规则</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><strong>使用Navicat连接MongoDB报错如下</strong><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cannot connect to MongoDB.</span><br><span class="line">No suitable servers found: serverSelectionTimeoutMS&#x27; expired: (TLS handshake failed: error00000000:lb(0):func(0):reason(0)</span><br></pre></td></tr></table></figure><blockquote><p>解决方法在Navicat中取消<code>使用SSL</code>选项</p></blockquote></li></ol><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p><strong>添加软件源并刷新</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper addrepo https://download.postgresql.org/pub/repos/zypp/repo/pgdg-sles-15-pg17-devel.repo</span><br><span class="line">sudo zypper ref</span><br></pre></td></tr></table></figure><p><strong>安装软件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in postgresql15-server</span><br></pre></td></tr></table></figure><p><strong>初始化数据库并设置密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用root用户身份切换到postgres用户</span></span><br><span class="line">sudo su - postgres</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化PostgreSQL, -D 参数用于指定新的数据库目录</span></span><br><span class="line">initdb -D /var/lib/pgsql/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置密码</span></span><br><span class="line">psql -c &quot;ALTER USER postgres WITH PASSWORD &#x27;123456&#x27;;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出postgres用户</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><strong>启动PostgreSQL或设置开机自启</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动PostgreSQL</span></span><br><span class="line">sudo systemctl start postgresql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置开机自启</span></span><br><span class="line">sudo systemctl enable postgresql</span><br></pre></td></tr></table></figure><p><strong>设置远程连接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改postgresql.conf</span></span><br><span class="line">sudo nano /var/lib/pgsql/data/postgresql.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增listen_addresses参数，默认只允许本地连接，设置为允许来自任何 IP 地址的连接</span></span><br><span class="line">listen_addresses = &#x27;*&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改pg_hba.conf</span></span><br><span class="line">sudo nano /var/lib/pgsql/data/pg_hba.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在文件末尾添加配置，运行所有IP连接</span></span><br><span class="line">host  all  all  0.0.0.0/0  md5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新启动PostgreSQL服务以使更改生效</span></span><br><span class="line">sudo systemctl restart postgresql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找防火墙是否开放PostgreSQL对应的端口，<span class="built_in">yes</span>是开放，no是未开放</span></span><br><span class="line">sudo firewall-cmd --query-port=5432/tcp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让防火墙开放PostgreSQL对应的端口</span></span><br><span class="line">sudo firewall-cmd --add-port=5432/tcp --permanent</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载防火墙规则</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p><strong>安装docker和docker-compose</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zypper install docker python3-docker-compose</span><br></pre></td></tr></table></figure><p><strong>设置开机自启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="Lazygit"><a href="#Lazygit" class="headerlink" title="Lazygit"></a>Lazygit</h2><p><strong>openSUSE Tumbleweed</strong><br><strong>openSUSE Leap</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source /etc/os-release</span><br><span class="line">sudo zypper ar https://download.opensuse.org/repositories/devel:/languages:/go/$VERSION_ID/devel:languages:go.repo</span><br><span class="line">sudo zypper ref &amp;&amp; sudo zypper in lazygit</span><br></pre></td></tr></table></figure><h2 id="Jetbrains产品光标不跟随的问题"><a href="#Jetbrains产品光标不跟随的问题" class="headerlink" title="Jetbrains产品光标不跟随的问题"></a>Jetbrains产品光标不跟随的问题</h2><p><a href="https://github.com/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64">JetBrainsRuntime-for-Linux-x64</a></p><h1 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h1><h2 id="Flameshot-截图工具"><a href="#Flameshot-截图工具" class="headerlink" title="Flameshot(截图工具)"></a>Flameshot(截图工具)</h2><p><strong>安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo zypper in flameshot</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用flatpak安装</span></span><br><span class="line">flatpak install flathub org.flameshot.Flameshot</span><br></pre></td></tr></table></figure><p><strong>配置快捷键（KDE Plasma）</strong></p><ol><li><p>获取配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/flameshot-org/flameshot/master/docs/shortcuts-config/flameshot-shortcuts-kde.khotkeys</span><br></pre></td></tr></table></figure></li><li><p>禁用默认的截图快捷键<br>打开 KDE 设置，找到 快捷键 ，点击 快捷键 ，然后在右侧菜单栏中删除 Spectale</p></li><li><p>导入设置<br>在原页面中，点击左侧的 自定义快捷键 ，再点击 编辑 ，然后点击 导入，保存，并注销重新登陆。</p></li></ol><h1 id="系统急救"><a href="#系统急救" class="headerlink" title="系统急救"></a>系统急救</h1><p>按<code>Ctrl + Alt + F1</code>进入内核终端页面<br>按<code>Ctrl + Alt + F3</code>进入命令行界面<br>按<code>Ctrl + Alt + F7</code>切换会桌面环境</p><p><strong>konsole</strong>设置方案出错之后可以使用以下命令恢复默认配置:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ~/.config/konsolerc ~/.config/konsolerc_backup</span><br></pre></td></tr></table></figure><h1 id="OpenSUSE常用网址"><a href="#OpenSUSE常用网址" class="headerlink" title="OpenSUSE常用网址"></a>OpenSUSE常用网址</h1><p><strong>查找软件</strong><br><a href="https://software.opensuse.org/">OpenSUSE software</a><br><strong>OpenSUSE wiki</strong><br><a href="https://zh.opensuse.org/%E9%A6%96%E9%A1%B5">OpenSUSE wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenSUSE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
